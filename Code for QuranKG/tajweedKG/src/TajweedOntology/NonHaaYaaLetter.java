package TajweedOntology;

import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: NonHaaYaaLetter <br>
 * @version generated on Tue Dec 31 23:36:34 PKT 2024 by amna
 */

public interface NonHaaYaaLetter extends Letter {

    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/belongsToGroup
     */
     
    /**
     * Gets all property values for the belongsToGroup property.<p>
     * 
     * @returns a collection of values for the belongsToGroup property.
     */
    Collection<? extends Word> getBelongsToGroup();

    /**
     * Checks if the class has a belongsToGroup property value.<p>
     * 
     * @return true if there is a belongsToGroup property value.
     */
    boolean hasBelongsToGroup();

    /**
     * Adds a belongsToGroup property value.<p>
     * 
     * @param newBelongsToGroup the belongsToGroup property value to be added
     */
    void addBelongsToGroup(Word newBelongsToGroup);

    /**
     * Removes a belongsToGroup property value.<p>
     * 
     * @param oldBelongsToGroup the belongsToGroup property value to be removed.
     */
    void removeBelongsToGroup(Word oldBelongsToGroup);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/composesWord
     */
     
    /**
     * Gets all property values for the composesWord property.<p>
     * 
     * @returns a collection of values for the composesWord property.
     */
    Collection<? extends Word> getComposesWord();

    /**
     * Checks if the class has a composesWord property value.<p>
     * 
     * @return true if there is a composesWord property value.
     */
    boolean hasComposesWord();

    /**
     * Adds a composesWord property value.<p>
     * 
     * @param newComposesWord the composesWord property value to be added
     */
    void addComposesWord(Word newComposesWord);

    /**
     * Removes a composesWord property value.<p>
     * 
     * @param oldComposesWord the composesWord property value to be removed.
     */
    void removeComposesWord(Word oldComposesWord);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/containLetter
     */
     
    /**
     * Gets all property values for the containLetter property.<p>
     * 
     * @returns a collection of values for the containLetter property.
     */
    Collection<? extends WrappedIndividual> getContainLetter();

    /**
     * Checks if the class has a containLetter property value.<p>
     * 
     * @return true if there is a containLetter property value.
     */
    boolean hasContainLetter();

    /**
     * Adds a containLetter property value.<p>
     * 
     * @param newContainLetter the containLetter property value to be added
     */
    void addContainLetter(WrappedIndividual newContainLetter);

    /**
     * Removes a containLetter property value.<p>
     * 
     * @param oldContainLetter the containLetter property value to be removed.
     */
    void removeContainLetter(WrappedIndividual oldContainLetter);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/containsLO
     */
     
    /**
     * Gets all property values for the containsLO property.<p>
     * 
     * @returns a collection of values for the containsLO property.
     */
    Collection<? extends LetterOccurrence> getContainsLO();

    /**
     * Checks if the class has a containsLO property value.<p>
     * 
     * @return true if there is a containsLO property value.
     */
    boolean hasContainsLO();

    /**
     * Adds a containsLO property value.<p>
     * 
     * @param newContainsLO the containsLO property value to be added
     */
    void addContainsLO(LetterOccurrence newContainsLO);

    /**
     * Removes a containsLO property value.<p>
     * 
     * @param oldContainsLO the containsLO property value to be removed.
     */
    void removeContainsLO(LetterOccurrence oldContainsLO);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/followedBy
     */
     
    /**
     * Gets all property values for the followedBy property.<p>
     * 
     * @returns a collection of values for the followedBy property.
     */
    Collection<? extends WrappedIndividual> getFollowedBy();

    /**
     * Checks if the class has a followedBy property value.<p>
     * 
     * @return true if there is a followedBy property value.
     */
    boolean hasFollowedBy();

    /**
     * Adds a followedBy property value.<p>
     * 
     * @param newFollowedBy the followedBy property value to be added
     */
    void addFollowedBy(WrappedIndividual newFollowedBy);

    /**
     * Removes a followedBy property value.<p>
     * 
     * @param oldFollowedBy the followedBy property value to be removed.
     */
    void removeFollowedBy(WrappedIndividual oldFollowedBy);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasArticulationPoint
     */
     
    /**
     * Gets all property values for the hasArticulationPoint property.<p>
     * 
     * @returns a collection of values for the hasArticulationPoint property.
     */
    Collection<? extends ArticulationPoint> getHasArticulationPoint();

    /**
     * Checks if the class has a hasArticulationPoint property value.<p>
     * 
     * @return true if there is a hasArticulationPoint property value.
     */
    boolean hasHasArticulationPoint();

    /**
     * Adds a hasArticulationPoint property value.<p>
     * 
     * @param newHasArticulationPoint the hasArticulationPoint property value to be added
     */
    void addHasArticulationPoint(ArticulationPoint newHasArticulationPoint);

    /**
     * Removes a hasArticulationPoint property value.<p>
     * 
     * @param oldHasArticulationPoint the hasArticulationPoint property value to be removed.
     */
    void removeHasArticulationPoint(ArticulationPoint oldHasArticulationPoint);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasCharacteristic
     */
     
    /**
     * Gets all property values for the hasCharacteristic property.<p>
     * 
     * @returns a collection of values for the hasCharacteristic property.
     */
    Collection<? extends BasicCharacteristic> getHasCharacteristic();

    /**
     * Checks if the class has a hasCharacteristic property value.<p>
     * 
     * @return true if there is a hasCharacteristic property value.
     */
    boolean hasHasCharacteristic();

    /**
     * Adds a hasCharacteristic property value.<p>
     * 
     * @param newHasCharacteristic the hasCharacteristic property value to be added
     */
    void addHasCharacteristic(BasicCharacteristic newHasCharacteristic);

    /**
     * Removes a hasCharacteristic property value.<p>
     * 
     * @param oldHasCharacteristic the hasCharacteristic property value to be removed.
     */
    void removeHasCharacteristic(BasicCharacteristic oldHasCharacteristic);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasPart
     */
     
    /**
     * Gets all property values for the hasPart property.<p>
     * 
     * @returns a collection of values for the hasPart property.
     */
    Collection<? extends WrappedIndividual> getHasPart();

    /**
     * Checks if the class has a hasPart property value.<p>
     * 
     * @return true if there is a hasPart property value.
     */
    boolean hasHasPart();

    /**
     * Adds a hasPart property value.<p>
     * 
     * @param newHasPart the hasPart property value to be added
     */
    void addHasPart(WrappedIndividual newHasPart);

    /**
     * Removes a hasPart property value.<p>
     * 
     * @param oldHasPart the hasPart property value to be removed.
     */
    void removeHasPart(WrappedIndividual oldHasPart);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasRuleInstance
     */
     
    /**
     * Gets all property values for the hasRuleInstance property.<p>
     * 
     * @returns a collection of values for the hasRuleInstance property.
     */
    Collection<? extends WrappedIndividual> getHasRuleInstance();

    /**
     * Checks if the class has a hasRuleInstance property value.<p>
     * 
     * @return true if there is a hasRuleInstance property value.
     */
    boolean hasHasRuleInstance();

    /**
     * Adds a hasRuleInstance property value.<p>
     * 
     * @param newHasRuleInstance the hasRuleInstance property value to be added
     */
    void addHasRuleInstance(WrappedIndividual newHasRuleInstance);

    /**
     * Removes a hasRuleInstance property value.<p>
     * 
     * @param oldHasRuleInstance the hasRuleInstance property value to be removed.
     */
    void removeHasRuleInstance(WrappedIndividual oldHasRuleInstance);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasRuleOccurrence
     */
     
    /**
     * Gets all property values for the hasRuleOccurrence property.<p>
     * 
     * @returns a collection of values for the hasRuleOccurrence property.
     */
    Collection<? extends WrappedIndividual> getHasRuleOccurrence();

    /**
     * Checks if the class has a hasRuleOccurrence property value.<p>
     * 
     * @return true if there is a hasRuleOccurrence property value.
     */
    boolean hasHasRuleOccurrence();

    /**
     * Adds a hasRuleOccurrence property value.<p>
     * 
     * @param newHasRuleOccurrence the hasRuleOccurrence property value to be added
     */
    void addHasRuleOccurrence(WrappedIndividual newHasRuleOccurrence);

    /**
     * Removes a hasRuleOccurrence property value.<p>
     * 
     * @param oldHasRuleOccurrence the hasRuleOccurrence property value to be removed.
     */
    void removeHasRuleOccurrence(WrappedIndividual oldHasRuleOccurrence);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasRuleState
     */
     
    /**
     * Gets all property values for the hasRuleState property.<p>
     * 
     * @returns a collection of values for the hasRuleState property.
     */
    Collection<? extends WrappedIndividual> getHasRuleState();

    /**
     * Checks if the class has a hasRuleState property value.<p>
     * 
     * @return true if there is a hasRuleState property value.
     */
    boolean hasHasRuleState();

    /**
     * Adds a hasRuleState property value.<p>
     * 
     * @param newHasRuleState the hasRuleState property value to be added
     */
    void addHasRuleState(WrappedIndividual newHasRuleState);

    /**
     * Removes a hasRuleState property value.<p>
     * 
     * @param oldHasRuleState the hasRuleState property value to be removed.
     */
    void removeHasRuleState(WrappedIndividual oldHasRuleState);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasRuleType
     */
     
    /**
     * Gets all property values for the hasRuleType property.<p>
     * 
     * @returns a collection of values for the hasRuleType property.
     */
    Collection<? extends WrappedIndividual> getHasRuleType();

    /**
     * Checks if the class has a hasRuleType property value.<p>
     * 
     * @return true if there is a hasRuleType property value.
     */
    boolean hasHasRuleType();

    /**
     * Adds a hasRuleType property value.<p>
     * 
     * @param newHasRuleType the hasRuleType property value to be added
     */
    void addHasRuleType(WrappedIndividual newHasRuleType);

    /**
     * Removes a hasRuleType property value.<p>
     * 
     * @param oldHasRuleType the hasRuleType property value to be removed.
     */
    void removeHasRuleType(WrappedIndividual oldHasRuleType);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/involvesArticulationArea
     */
     
    /**
     * Gets all property values for the involvesArticulationArea property.<p>
     * 
     * @returns a collection of values for the involvesArticulationArea property.
     */
    Collection<? extends AreaOfArticulation> getInvolvesArticulationArea();

    /**
     * Checks if the class has a involvesArticulationArea property value.<p>
     * 
     * @return true if there is a involvesArticulationArea property value.
     */
    boolean hasInvolvesArticulationArea();

    /**
     * Adds a involvesArticulationArea property value.<p>
     * 
     * @param newInvolvesArticulationArea the involvesArticulationArea property value to be added
     */
    void addInvolvesArticulationArea(AreaOfArticulation newInvolvesArticulationArea);

    /**
     * Removes a involvesArticulationArea property value.<p>
     * 
     * @param oldInvolvesArticulationArea the involvesArticulationArea property value to be removed.
     */
    void removeInvolvesArticulationArea(AreaOfArticulation oldInvolvesArticulationArea);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/involvesDiacritic
     */
     
    /**
     * Gets all property values for the involvesDiacritic property.<p>
     * 
     * @returns a collection of values for the involvesDiacritic property.
     */
    Collection<? extends WrappedIndividual> getInvolvesDiacritic();

    /**
     * Checks if the class has a involvesDiacritic property value.<p>
     * 
     * @return true if there is a involvesDiacritic property value.
     */
    boolean hasInvolvesDiacritic();

    /**
     * Adds a involvesDiacritic property value.<p>
     * 
     * @param newInvolvesDiacritic the involvesDiacritic property value to be added
     */
    void addInvolvesDiacritic(WrappedIndividual newInvolvesDiacritic);

    /**
     * Removes a involvesDiacritic property value.<p>
     * 
     * @param oldInvolvesDiacritic the involvesDiacritic property value to be removed.
     */
    void removeInvolvesDiacritic(WrappedIndividual oldInvolvesDiacritic);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/involvesPauseMarker
     */
     
    /**
     * Gets all property values for the involvesPauseMarker property.<p>
     * 
     * @returns a collection of values for the involvesPauseMarker property.
     */
    Collection<? extends WrappedIndividual> getInvolvesPauseMarker();

    /**
     * Checks if the class has a involvesPauseMarker property value.<p>
     * 
     * @return true if there is a involvesPauseMarker property value.
     */
    boolean hasInvolvesPauseMarker();

    /**
     * Adds a involvesPauseMarker property value.<p>
     * 
     * @param newInvolvesPauseMarker the involvesPauseMarker property value to be added
     */
    void addInvolvesPauseMarker(WrappedIndividual newInvolvesPauseMarker);

    /**
     * Removes a involvesPauseMarker property value.<p>
     * 
     * @param oldInvolvesPauseMarker the involvesPauseMarker property value to be removed.
     */
    void removeInvolvesPauseMarker(WrappedIndividual oldInvolvesPauseMarker);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/isCloseTo
     */
     
    /**
     * Gets all property values for the isCloseTo property.<p>
     * 
     * @returns a collection of values for the isCloseTo property.
     */
    Collection<? extends WrappedIndividual> getIsCloseTo();

    /**
     * Checks if the class has a isCloseTo property value.<p>
     * 
     * @return true if there is a isCloseTo property value.
     */
    boolean hasIsCloseTo();

    /**
     * Adds a isCloseTo property value.<p>
     * 
     * @param newIsCloseTo the isCloseTo property value to be added
     */
    void addIsCloseTo(WrappedIndividual newIsCloseTo);

    /**
     * Removes a isCloseTo property value.<p>
     * 
     * @param oldIsCloseTo the isCloseTo property value to be removed.
     */
    void removeIsCloseTo(WrappedIndividual oldIsCloseTo);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/isPartOf
     */
     
    /**
     * Gets all property values for the isPartOf property.<p>
     * 
     * @returns a collection of values for the isPartOf property.
     */
    Collection<? extends WrappedIndividual> getIsPartOf();

    /**
     * Checks if the class has a isPartOf property value.<p>
     * 
     * @return true if there is a isPartOf property value.
     */
    boolean hasIsPartOf();

    /**
     * Adds a isPartOf property value.<p>
     * 
     * @param newIsPartOf the isPartOf property value to be added
     */
    void addIsPartOf(WrappedIndividual newIsPartOf);

    /**
     * Removes a isPartOf property value.<p>
     * 
     * @param oldIsPartOf the isPartOf property value to be removed.
     */
    void removeIsPartOf(WrappedIndividual oldIsPartOf);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/isPartOfVerse
     */
     
    /**
     * Gets all property values for the isPartOfVerse property.<p>
     * 
     * @returns a collection of values for the isPartOfVerse property.
     */
    Collection<? extends Verse> getIsPartOfVerse();

    /**
     * Checks if the class has a isPartOfVerse property value.<p>
     * 
     * @return true if there is a isPartOfVerse property value.
     */
    boolean hasIsPartOfVerse();

    /**
     * Adds a isPartOfVerse property value.<p>
     * 
     * @param newIsPartOfVerse the isPartOfVerse property value to be added
     */
    void addIsPartOfVerse(Verse newIsPartOfVerse);

    /**
     * Removes a isPartOfVerse property value.<p>
     * 
     * @param oldIsPartOfVerse the isPartOfVerse property value to be removed.
     */
    void removeIsPartOfVerse(Verse oldIsPartOfVerse);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/isSimilarTo
     */
     
    /**
     * Gets all property values for the isSimilarTo property.<p>
     * 
     * @returns a collection of values for the isSimilarTo property.
     */
    Collection<? extends WrappedIndividual> getIsSimilarTo();

    /**
     * Checks if the class has a isSimilarTo property value.<p>
     * 
     * @return true if there is a isSimilarTo property value.
     */
    boolean hasIsSimilarTo();

    /**
     * Adds a isSimilarTo property value.<p>
     * 
     * @param newIsSimilarTo the isSimilarTo property value to be added
     */
    void addIsSimilarTo(WrappedIndividual newIsSimilarTo);

    /**
     * Removes a isSimilarTo property value.<p>
     * 
     * @param oldIsSimilarTo the isSimilarTo property value to be removed.
     */
    void removeIsSimilarTo(WrappedIndividual oldIsSimilarTo);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/occursAt
     */
     
    /**
     * Gets all property values for the occursAt property.<p>
     * 
     * @returns a collection of values for the occursAt property.
     */
    Collection<? extends WrappedIndividual> getOccursAt();

    /**
     * Checks if the class has a occursAt property value.<p>
     * 
     * @return true if there is a occursAt property value.
     */
    boolean hasOccursAt();

    /**
     * Adds a occursAt property value.<p>
     * 
     * @param newOccursAt the occursAt property value to be added
     */
    void addOccursAt(WrappedIndividual newOccursAt);

    /**
     * Removes a occursAt property value.<p>
     * 
     * @param oldOccursAt the occursAt property value to be removed.
     */
    void removeOccursAt(WrappedIndividual oldOccursAt);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/precededBy
     */
     
    /**
     * Gets all property values for the precededBy property.<p>
     * 
     * @returns a collection of values for the precededBy property.
     */
    Collection<? extends WrappedIndividual> getPrecededBy();

    /**
     * Checks if the class has a precededBy property value.<p>
     * 
     * @return true if there is a precededBy property value.
     */
    boolean hasPrecededBy();

    /**
     * Adds a precededBy property value.<p>
     * 
     * @param newPrecededBy the precededBy property value to be added
     */
    void addPrecededBy(WrappedIndividual newPrecededBy);

    /**
     * Removes a precededBy property value.<p>
     * 
     * @param oldPrecededBy the precededBy property value to be removed.
     */
    void removePrecededBy(WrappedIndividual oldPrecededBy);


    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/chapterIndex
     */
     
    /**
     * Gets all property values for the chapterIndex property.<p>
     * 
     * @returns a collection of values for the chapterIndex property.
     */
    Collection<? extends Object> getChapterIndex();

    /**
     * Checks if the class has a chapterIndex property value.<p>
     * 
     * @return true if there is a chapterIndex property value.
     */
    boolean hasChapterIndex();

    /**
     * Adds a chapterIndex property value.<p>
     * 
     * @param newChapterIndex the chapterIndex property value to be added
     */
    void addChapterIndex(Object newChapterIndex);

    /**
     * Removes a chapterIndex property value.<p>
     * 
     * @param oldChapterIndex the chapterIndex property value to be removed.
     */
    void removeChapterIndex(Object oldChapterIndex);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasAppliedTajweedDefinition
     */
     
    /**
     * Gets all property values for the hasAppliedTajweedDefinition property.<p>
     * 
     * @returns a collection of values for the hasAppliedTajweedDefinition property.
     */
    Collection<? extends Object> getHasAppliedTajweedDefinition();

    /**
     * Checks if the class has a hasAppliedTajweedDefinition property value.<p>
     * 
     * @return true if there is a hasAppliedTajweedDefinition property value.
     */
    boolean hasHasAppliedTajweedDefinition();

    /**
     * Adds a hasAppliedTajweedDefinition property value.<p>
     * 
     * @param newHasAppliedTajweedDefinition the hasAppliedTajweedDefinition property value to be added
     */
    void addHasAppliedTajweedDefinition(Object newHasAppliedTajweedDefinition);

    /**
     * Removes a hasAppliedTajweedDefinition property value.<p>
     * 
     * @param oldHasAppliedTajweedDefinition the hasAppliedTajweedDefinition property value to be removed.
     */
    void removeHasAppliedTajweedDefinition(Object oldHasAppliedTajweedDefinition);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasDiacriticPosition
     */
     
    /**
     * Gets all property values for the hasDiacriticPosition property.<p>
     * 
     * @returns a collection of values for the hasDiacriticPosition property.
     */
    Collection<? extends Integer> getHasDiacriticPosition();

    /**
     * Checks if the class has a hasDiacriticPosition property value.<p>
     * 
     * @return true if there is a hasDiacriticPosition property value.
     */
    boolean hasHasDiacriticPosition();

    /**
     * Adds a hasDiacriticPosition property value.<p>
     * 
     * @param newHasDiacriticPosition the hasDiacriticPosition property value to be added
     */
    void addHasDiacriticPosition(Integer newHasDiacriticPosition);

    /**
     * Removes a hasDiacriticPosition property value.<p>
     * 
     * @param oldHasDiacriticPosition the hasDiacriticPosition property value to be removed.
     */
    void removeHasDiacriticPosition(Integer oldHasDiacriticPosition);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasExplaination
     */
     
    /**
     * Gets all property values for the hasExplaination property.<p>
     * 
     * @returns a collection of values for the hasExplaination property.
     */
    Collection<? extends Object> getHasExplaination();

    /**
     * Checks if the class has a hasExplaination property value.<p>
     * 
     * @return true if there is a hasExplaination property value.
     */
    boolean hasHasExplaination();

    /**
     * Adds a hasExplaination property value.<p>
     * 
     * @param newHasExplaination the hasExplaination property value to be added
     */
    void addHasExplaination(Object newHasExplaination);

    /**
     * Removes a hasExplaination property value.<p>
     * 
     * @param oldHasExplaination the hasExplaination property value to be removed.
     */
    void removeHasExplaination(Object oldHasExplaination);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasLetterPosition
     */
     
    /**
     * Gets all property values for the hasLetterPosition property.<p>
     * 
     * @returns a collection of values for the hasLetterPosition property.
     */
    Collection<? extends Integer> getHasLetterPosition();

    /**
     * Checks if the class has a hasLetterPosition property value.<p>
     * 
     * @return true if there is a hasLetterPosition property value.
     */
    boolean hasHasLetterPosition();

    /**
     * Adds a hasLetterPosition property value.<p>
     * 
     * @param newHasLetterPosition the hasLetterPosition property value to be added
     */
    void addHasLetterPosition(Integer newHasLetterPosition);

    /**
     * Removes a hasLetterPosition property value.<p>
     * 
     * @param oldHasLetterPosition the hasLetterPosition property value to be removed.
     */
    void removeHasLetterPosition(Integer oldHasLetterPosition);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasLinguisticDefinition
     */
     
    /**
     * Gets all property values for the hasLinguisticDefinition property.<p>
     * 
     * @returns a collection of values for the hasLinguisticDefinition property.
     */
    Collection<? extends Object> getHasLinguisticDefinition();

    /**
     * Checks if the class has a hasLinguisticDefinition property value.<p>
     * 
     * @return true if there is a hasLinguisticDefinition property value.
     */
    boolean hasHasLinguisticDefinition();

    /**
     * Adds a hasLinguisticDefinition property value.<p>
     * 
     * @param newHasLinguisticDefinition the hasLinguisticDefinition property value to be added
     */
    void addHasLinguisticDefinition(Object newHasLinguisticDefinition);

    /**
     * Removes a hasLinguisticDefinition property value.<p>
     * 
     * @param oldHasLinguisticDefinition the hasLinguisticDefinition property value to be removed.
     */
    void removeHasLinguisticDefinition(Object oldHasLinguisticDefinition);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/hasSheikhAlJazareeReference
     */
     
    /**
     * Gets all property values for the hasSheikhAlJazareeReference property.<p>
     * 
     * @returns a collection of values for the hasSheikhAlJazareeReference property.
     */
    Collection<? extends Object> getHasSheikhAlJazareeReference();

    /**
     * Checks if the class has a hasSheikhAlJazareeReference property value.<p>
     * 
     * @return true if there is a hasSheikhAlJazareeReference property value.
     */
    boolean hasHasSheikhAlJazareeReference();

    /**
     * Adds a hasSheikhAlJazareeReference property value.<p>
     * 
     * @param newHasSheikhAlJazareeReference the hasSheikhAlJazareeReference property value to be added
     */
    void addHasSheikhAlJazareeReference(Object newHasSheikhAlJazareeReference);

    /**
     * Removes a hasSheikhAlJazareeReference property value.<p>
     * 
     * @param oldHasSheikhAlJazareeReference the hasSheikhAlJazareeReference property value to be removed.
     */
    void removeHasSheikhAlJazareeReference(Object oldHasSheikhAlJazareeReference);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/revelationOrder
     */
     
    /**
     * Gets all property values for the revelationOrder property.<p>
     * 
     * @returns a collection of values for the revelationOrder property.
     */
    Collection<? extends Object> getRevelationOrder();

    /**
     * Checks if the class has a revelationOrder property value.<p>
     * 
     * @return true if there is a revelationOrder property value.
     */
    boolean hasRevelationOrder();

    /**
     * Adds a revelationOrder property value.<p>
     * 
     * @param newRevelationOrder the revelationOrder property value to be added
     */
    void addRevelationOrder(Object newRevelationOrder);

    /**
     * Removes a revelationOrder property value.<p>
     * 
     * @param oldRevelationOrder the revelationOrder property value to be removed.
     */
    void removeRevelationOrder(Object oldRevelationOrder);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/revelationPlace
     */
     
    /**
     * Gets all property values for the revelationPlace property.<p>
     * 
     * @returns a collection of values for the revelationPlace property.
     */
    Collection<? extends Object> getRevelationPlace();

    /**
     * Checks if the class has a revelationPlace property value.<p>
     * 
     * @return true if there is a revelationPlace property value.
     */
    boolean hasRevelationPlace();

    /**
     * Adds a revelationPlace property value.<p>
     * 
     * @param newRevelationPlace the revelationPlace property value to be added
     */
    void addRevelationPlace(Object newRevelationPlace);

    /**
     * Removes a revelationPlace property value.<p>
     * 
     * @param oldRevelationPlace the revelationPlace property value to be removed.
     */
    void removeRevelationPlace(Object oldRevelationPlace);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/verseAbsoluteIndex
     */
     
    /**
     * Gets all property values for the verseAbsoluteIndex property.<p>
     * 
     * @returns a collection of values for the verseAbsoluteIndex property.
     */
    Collection<? extends Object> getVerseAbsoluteIndex();

    /**
     * Checks if the class has a verseAbsoluteIndex property value.<p>
     * 
     * @return true if there is a verseAbsoluteIndex property value.
     */
    boolean hasVerseAbsoluteIndex();

    /**
     * Adds a verseAbsoluteIndex property value.<p>
     * 
     * @param newVerseAbsoluteIndex the verseAbsoluteIndex property value to be added
     */
    void addVerseAbsoluteIndex(Object newVerseAbsoluteIndex);

    /**
     * Removes a verseAbsoluteIndex property value.<p>
     * 
     * @param oldVerseAbsoluteIndex the verseAbsoluteIndex property value to be removed.
     */
    void removeVerseAbsoluteIndex(Object oldVerseAbsoluteIndex);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/verseCount
     */
     
    /**
     * Gets all property values for the verseCount property.<p>
     * 
     * @returns a collection of values for the verseCount property.
     */
    Collection<? extends Object> getVerseCount();

    /**
     * Checks if the class has a verseCount property value.<p>
     * 
     * @return true if there is a verseCount property value.
     */
    boolean hasVerseCount();

    /**
     * Adds a verseCount property value.<p>
     * 
     * @param newVerseCount the verseCount property value to be added
     */
    void addVerseCount(Object newVerseCount);

    /**
     * Removes a verseCount property value.<p>
     * 
     * @param oldVerseCount the verseCount property value to be removed.
     */
    void removeVerseCount(Object oldVerseCount);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/verseIndex
     */
     
    /**
     * Gets all property values for the verseIndex property.<p>
     * 
     * @returns a collection of values for the verseIndex property.
     */
    Collection<? extends Object> getVerseIndex();

    /**
     * Checks if the class has a verseIndex property value.<p>
     * 
     * @return true if there is a verseIndex property value.
     */
    boolean hasVerseIndex();

    /**
     * Adds a verseIndex property value.<p>
     * 
     * @param newVerseIndex the verseIndex property value to be added
     */
    void addVerseIndex(Object newVerseIndex);

    /**
     * Removes a verseIndex property value.<p>
     * 
     * @param oldVerseIndex the verseIndex property value to be removed.
     */
    void removeVerseIndex(Object oldVerseIndex);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/verseText
     */
     
    /**
     * Gets all property values for the verseText property.<p>
     * 
     * @returns a collection of values for the verseText property.
     */
    Collection<? extends Object> getVerseText();

    /**
     * Checks if the class has a verseText property value.<p>
     * 
     * @return true if there is a verseText property value.
     */
    boolean hasVerseText();

    /**
     * Adds a verseText property value.<p>
     * 
     * @param newVerseText the verseText property value to be added
     */
    void addVerseText(Object newVerseText);

    /**
     * Removes a verseText property value.<p>
     * 
     * @param oldVerseText the verseText property value to be removed.
     */
    void removeVerseText(Object oldVerseText);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/wordIndex
     */
     
    /**
     * Gets all property values for the wordIndex property.<p>
     * 
     * @returns a collection of values for the wordIndex property.
     */
    Collection<? extends Object> getWordIndex();

    /**
     * Checks if the class has a wordIndex property value.<p>
     * 
     * @return true if there is a wordIndex property value.
     */
    boolean hasWordIndex();

    /**
     * Adds a wordIndex property value.<p>
     * 
     * @param newWordIndex the wordIndex property value to be added
     */
    void addWordIndex(Object newWordIndex);

    /**
     * Removes a wordIndex property value.<p>
     * 
     * @param oldWordIndex the wordIndex property value to be removed.
     */
    void removeWordIndex(Object oldWordIndex);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/wordRoot
     */
     
    /**
     * Gets all property values for the wordRoot property.<p>
     * 
     * @returns a collection of values for the wordRoot property.
     */
    Collection<? extends Object> getWordRoot();

    /**
     * Checks if the class has a wordRoot property value.<p>
     * 
     * @return true if there is a wordRoot property value.
     */
    boolean hasWordRoot();

    /**
     * Adds a wordRoot property value.<p>
     * 
     * @param newWordRoot the wordRoot property value to be added
     */
    void addWordRoot(Object newWordRoot);

    /**
     * Removes a wordRoot property value.<p>
     * 
     * @param oldWordRoot the wordRoot property value to be removed.
     */
    void removeWordRoot(Object oldWordRoot);



    /* ***************************************************
     * Property http://www.semantictajweed.com/ontology/wordText
     */
     
    /**
     * Gets all property values for the wordText property.<p>
     * 
     * @returns a collection of values for the wordText property.
     */
    Collection<? extends Object> getWordText();

    /**
     * Checks if the class has a wordText property value.<p>
     * 
     * @return true if there is a wordText property value.
     */
    boolean hasWordText();

    /**
     * Adds a wordText property value.<p>
     * 
     * @param newWordText the wordText property value to be added
     */
    void addWordText(Object newWordText);

    /**
     * Removes a wordText property value.<p>
     * 
     * @param oldWordText the wordText property value to be removed.
     */
    void removeWordText(Object oldWordText);



    /* ***************************************************
     * Property http://www.w3.org/2000/01/rdf-schema#label
     */
     
    /**
     * Gets all property values for the rdfs_label property.<p>
     * 
     * @returns a collection of values for the rdfs_label property.
     */
    Collection<? extends Object> getrdfs_label();

    /**
     * Checks if the class has a rdfs_label property value.<p>
     * 
     * @return true if there is a rdfs_label property value.
     */
    boolean hasrdfs_label();

    /**
     * Adds a rdfs_label property value.<p>
     * 
     * @param newrdfs_label the rdfs_label property value to be added
     */
    void addrdfs_label(Object newrdfs_label);

    /**
     * Removes a rdfs_label property value.<p>
     * 
     * @param oldrdfs_label the rdfs_label property value to be removed.
     */
    void removerdfs_label(Object oldrdfs_label);



    /* ***************************************************
     * Property http://www.w3.org/2000/01/rdf-schema#seeAlso
     */
     
    /**
     * Gets all property values for the rdfs_seeAlso property.<p>
     * 
     * @returns a collection of values for the rdfs_seeAlso property.
     */
    Collection<? extends Object> getrdfs_seeAlso();

    /**
     * Checks if the class has a rdfs_seeAlso property value.<p>
     * 
     * @return true if there is a rdfs_seeAlso property value.
     */
    boolean hasrdfs_seeAlso();

    /**
     * Adds a rdfs_seeAlso property value.<p>
     * 
     * @param newrdfs_seeAlso the rdfs_seeAlso property value to be added
     */
    void addrdfs_seeAlso(Object newrdfs_seeAlso);

    /**
     * Removes a rdfs_seeAlso property value.<p>
     * 
     * @param oldrdfs_seeAlso the rdfs_seeAlso property value to be removed.
     */
    void removerdfs_seeAlso(Object oldrdfs_seeAlso);



    /* ***************************************************
     * Property http://www.w3.org/2002/07/owl#sameAs
     */
     
    /**
     * Gets all property values for the owl_sameAs property.<p>
     * 
     * @returns a collection of values for the owl_sameAs property.
     */
    Collection<? extends Object> getowl_sameAs();

    /**
     * Checks if the class has a owl_sameAs property value.<p>
     * 
     * @return true if there is a owl_sameAs property value.
     */
    boolean hasowl_sameAs();

    /**
     * Adds a owl_sameAs property value.<p>
     * 
     * @param newowl_sameAs the owl_sameAs property value to be added
     */
    void addowl_sameAs(Object newowl_sameAs);

    /**
     * Removes a owl_sameAs property value.<p>
     * 
     * @param oldowl_sameAs the owl_sameAs property value to be removed.
     */
    void removeowl_sameAs(Object oldowl_sameAs);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
