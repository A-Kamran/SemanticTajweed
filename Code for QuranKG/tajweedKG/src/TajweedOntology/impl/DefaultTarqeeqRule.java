package TajweedOntology.impl;

import TajweedOntology.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultTarqeeqRule <br>
 * @version generated on Tue Dec 31 23:36:35 PKT 2024 by amna
 */
public class DefaultTarqeeqRule extends WrappedIndividualImpl implements TarqeeqRule {

    public DefaultTarqeeqRule(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/containLetter
     */
     
    public Collection<? extends WrappedIndividual> getContainLetter() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_CONTAINLETTER,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasContainLetter() {
	   return !getContainLetter().isEmpty();
    }

    public void addContainLetter(WrappedIndividual newContainLetter) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_CONTAINLETTER,
                                       newContainLetter);
    }

    public void removeContainLetter(WrappedIndividual oldContainLetter) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_CONTAINLETTER,
                                          oldContainLetter);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/containsLO
     */
     
    public Collection<? extends LetterOccurrence> getContainsLO() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_CONTAINSLO,
                                               DefaultLetterOccurrence.class);
    }

    public boolean hasContainsLO() {
	   return !getContainsLO().isEmpty();
    }

    public void addContainsLO(LetterOccurrence newContainsLO) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_CONTAINSLO,
                                       newContainsLO);
    }

    public void removeContainsLO(LetterOccurrence oldContainsLO) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_CONTAINSLO,
                                          oldContainsLO);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/followedBy
     */
     
    public Collection<? extends WrappedIndividual> getFollowedBy() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_FOLLOWEDBY,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasFollowedBy() {
	   return !getFollowedBy().isEmpty();
    }

    public void addFollowedBy(WrappedIndividual newFollowedBy) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_FOLLOWEDBY,
                                       newFollowedBy);
    }

    public void removeFollowedBy(WrappedIndividual oldFollowedBy) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_FOLLOWEDBY,
                                          oldFollowedBy);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/hasPart
     */
     
    public Collection<? extends WrappedIndividual> getHasPart() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASPART,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasHasPart() {
	   return !getHasPart().isEmpty();
    }

    public void addHasPart(WrappedIndividual newHasPart) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASPART,
                                       newHasPart);
    }

    public void removeHasPart(WrappedIndividual oldHasPart) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASPART,
                                          oldHasPart);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/hasRuleInstance
     */
     
    public Collection<? extends WrappedIndividual> getHasRuleInstance() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASRULEINSTANCE,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasHasRuleInstance() {
	   return !getHasRuleInstance().isEmpty();
    }

    public void addHasRuleInstance(WrappedIndividual newHasRuleInstance) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASRULEINSTANCE,
                                       newHasRuleInstance);
    }

    public void removeHasRuleInstance(WrappedIndividual oldHasRuleInstance) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASRULEINSTANCE,
                                          oldHasRuleInstance);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/hasRuleOccurrence
     */
     
    public Collection<? extends WrappedIndividual> getHasRuleOccurrence() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASRULEOCCURRENCE,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasHasRuleOccurrence() {
	   return !getHasRuleOccurrence().isEmpty();
    }

    public void addHasRuleOccurrence(WrappedIndividual newHasRuleOccurrence) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASRULEOCCURRENCE,
                                       newHasRuleOccurrence);
    }

    public void removeHasRuleOccurrence(WrappedIndividual oldHasRuleOccurrence) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASRULEOCCURRENCE,
                                          oldHasRuleOccurrence);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/hasRuleState
     */
     
    public Collection<? extends WrappedIndividual> getHasRuleState() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASRULESTATE,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasHasRuleState() {
	   return !getHasRuleState().isEmpty();
    }

    public void addHasRuleState(WrappedIndividual newHasRuleState) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASRULESTATE,
                                       newHasRuleState);
    }

    public void removeHasRuleState(WrappedIndividual oldHasRuleState) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASRULESTATE,
                                          oldHasRuleState);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/hasRuleType
     */
     
    public Collection<? extends WrappedIndividual> getHasRuleType() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASRULETYPE,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasHasRuleType() {
	   return !getHasRuleType().isEmpty();
    }

    public void addHasRuleType(WrappedIndividual newHasRuleType) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASRULETYPE,
                                       newHasRuleType);
    }

    public void removeHasRuleType(WrappedIndividual oldHasRuleType) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASRULETYPE,
                                          oldHasRuleType);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/involvesArticulationArea
     */
     
    public Collection<? extends AreaOfArticulation> getInvolvesArticulationArea() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_INVOLVESARTICULATIONAREA,
                                               DefaultAreaOfArticulation.class);
    }

    public boolean hasInvolvesArticulationArea() {
	   return !getInvolvesArticulationArea().isEmpty();
    }

    public void addInvolvesArticulationArea(AreaOfArticulation newInvolvesArticulationArea) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_INVOLVESARTICULATIONAREA,
                                       newInvolvesArticulationArea);
    }

    public void removeInvolvesArticulationArea(AreaOfArticulation oldInvolvesArticulationArea) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_INVOLVESARTICULATIONAREA,
                                          oldInvolvesArticulationArea);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/involvesDiacritic
     */
     
    public Collection<? extends WrappedIndividual> getInvolvesDiacritic() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_INVOLVESDIACRITIC,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasInvolvesDiacritic() {
	   return !getInvolvesDiacritic().isEmpty();
    }

    public void addInvolvesDiacritic(WrappedIndividual newInvolvesDiacritic) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_INVOLVESDIACRITIC,
                                       newInvolvesDiacritic);
    }

    public void removeInvolvesDiacritic(WrappedIndividual oldInvolvesDiacritic) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_INVOLVESDIACRITIC,
                                          oldInvolvesDiacritic);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/involvesPauseMarker
     */
     
    public Collection<? extends WrappedIndividual> getInvolvesPauseMarker() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_INVOLVESPAUSEMARKER,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasInvolvesPauseMarker() {
	   return !getInvolvesPauseMarker().isEmpty();
    }

    public void addInvolvesPauseMarker(WrappedIndividual newInvolvesPauseMarker) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_INVOLVESPAUSEMARKER,
                                       newInvolvesPauseMarker);
    }

    public void removeInvolvesPauseMarker(WrappedIndividual oldInvolvesPauseMarker) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_INVOLVESPAUSEMARKER,
                                          oldInvolvesPauseMarker);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/isCloseTo
     */
     
    public Collection<? extends WrappedIndividual> getIsCloseTo() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISCLOSETO,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIsCloseTo() {
	   return !getIsCloseTo().isEmpty();
    }

    public void addIsCloseTo(WrappedIndividual newIsCloseTo) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISCLOSETO,
                                       newIsCloseTo);
    }

    public void removeIsCloseTo(WrappedIndividual oldIsCloseTo) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISCLOSETO,
                                          oldIsCloseTo);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/isPartOf
     */
     
    public Collection<? extends WrappedIndividual> getIsPartOf() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIsPartOf() {
	   return !getIsPartOf().isEmpty();
    }

    public void addIsPartOf(WrappedIndividual newIsPartOf) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                       newIsPartOf);
    }

    public void removeIsPartOf(WrappedIndividual oldIsPartOf) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISPARTOF,
                                          oldIsPartOf);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/isPartOfVerse
     */
     
    public Collection<? extends Verse> getIsPartOfVerse() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISPARTOFVERSE,
                                               DefaultVerse.class);
    }

    public boolean hasIsPartOfVerse() {
	   return !getIsPartOfVerse().isEmpty();
    }

    public void addIsPartOfVerse(Verse newIsPartOfVerse) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISPARTOFVERSE,
                                       newIsPartOfVerse);
    }

    public void removeIsPartOfVerse(Verse oldIsPartOfVerse) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISPARTOFVERSE,
                                          oldIsPartOfVerse);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/isSimilarTo
     */
     
    public Collection<? extends WrappedIndividual> getIsSimilarTo() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISSIMILARTO,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIsSimilarTo() {
	   return !getIsSimilarTo().isEmpty();
    }

    public void addIsSimilarTo(WrappedIndividual newIsSimilarTo) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISSIMILARTO,
                                       newIsSimilarTo);
    }

    public void removeIsSimilarTo(WrappedIndividual oldIsSimilarTo) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISSIMILARTO,
                                          oldIsSimilarTo);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/occursAt
     */
     
    public Collection<? extends WrappedIndividual> getOccursAt() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_OCCURSAT,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasOccursAt() {
	   return !getOccursAt().isEmpty();
    }

    public void addOccursAt(WrappedIndividual newOccursAt) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_OCCURSAT,
                                       newOccursAt);
    }

    public void removeOccursAt(WrappedIndividual oldOccursAt) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_OCCURSAT,
                                          oldOccursAt);
    }


    /* ***************************************************
     * Object Property http://www.semantictajweed.com/ontology/precededBy
     */
     
    public Collection<? extends WrappedIndividual> getPrecededBy() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_PRECEDEDBY,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasPrecededBy() {
	   return !getPrecededBy().isEmpty();
    }

    public void addPrecededBy(WrappedIndividual newPrecededBy) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_PRECEDEDBY,
                                       newPrecededBy);
    }

    public void removePrecededBy(WrappedIndividual oldPrecededBy) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_PRECEDEDBY,
                                          oldPrecededBy);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/chapterIndex
     */
     
    public Collection<? extends Object> getChapterIndex() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_CHAPTERINDEX, Object.class);
    }

    public boolean hasChapterIndex() {
		return !getChapterIndex().isEmpty();
    }

    public void addChapterIndex(Object newChapterIndex) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_CHAPTERINDEX, newChapterIndex);
    }

    public void removeChapterIndex(Object oldChapterIndex) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_CHAPTERINDEX, oldChapterIndex);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/hasAppliedTajweedDefinition
     */
     
    public Collection<? extends Object> getHasAppliedTajweedDefinition() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASAPPLIEDTAJWEEDDEFINITION, Object.class);
    }

    public boolean hasHasAppliedTajweedDefinition() {
		return !getHasAppliedTajweedDefinition().isEmpty();
    }

    public void addHasAppliedTajweedDefinition(Object newHasAppliedTajweedDefinition) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASAPPLIEDTAJWEEDDEFINITION, newHasAppliedTajweedDefinition);
    }

    public void removeHasAppliedTajweedDefinition(Object oldHasAppliedTajweedDefinition) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASAPPLIEDTAJWEEDDEFINITION, oldHasAppliedTajweedDefinition);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/hasDiacriticPosition
     */
     
    public Collection<? extends Integer> getHasDiacriticPosition() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASDIACRITICPOSITION, Integer.class);
    }

    public boolean hasHasDiacriticPosition() {
		return !getHasDiacriticPosition().isEmpty();
    }

    public void addHasDiacriticPosition(Integer newHasDiacriticPosition) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASDIACRITICPOSITION, newHasDiacriticPosition);
    }

    public void removeHasDiacriticPosition(Integer oldHasDiacriticPosition) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASDIACRITICPOSITION, oldHasDiacriticPosition);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/hasExplaination
     */
     
    public Collection<? extends Object> getHasExplaination() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASEXPLAINATION, Object.class);
    }

    public boolean hasHasExplaination() {
		return !getHasExplaination().isEmpty();
    }

    public void addHasExplaination(Object newHasExplaination) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASEXPLAINATION, newHasExplaination);
    }

    public void removeHasExplaination(Object oldHasExplaination) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASEXPLAINATION, oldHasExplaination);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/hasLetterPosition
     */
     
    public Collection<? extends Integer> getHasLetterPosition() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLETTERPOSITION, Integer.class);
    }

    public boolean hasHasLetterPosition() {
		return !getHasLetterPosition().isEmpty();
    }

    public void addHasLetterPosition(Integer newHasLetterPosition) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLETTERPOSITION, newHasLetterPosition);
    }

    public void removeHasLetterPosition(Integer oldHasLetterPosition) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLETTERPOSITION, oldHasLetterPosition);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/hasLinguisticDefinition
     */
     
    public Collection<? extends Object> getHasLinguisticDefinition() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLINGUISTICDEFINITION, Object.class);
    }

    public boolean hasHasLinguisticDefinition() {
		return !getHasLinguisticDefinition().isEmpty();
    }

    public void addHasLinguisticDefinition(Object newHasLinguisticDefinition) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLINGUISTICDEFINITION, newHasLinguisticDefinition);
    }

    public void removeHasLinguisticDefinition(Object oldHasLinguisticDefinition) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASLINGUISTICDEFINITION, oldHasLinguisticDefinition);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/hasSheikhAlJazareeReference
     */
     
    public Collection<? extends Object> getHasSheikhAlJazareeReference() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASSHEIKHALJAZAREEREFERENCE, Object.class);
    }

    public boolean hasHasSheikhAlJazareeReference() {
		return !getHasSheikhAlJazareeReference().isEmpty();
    }

    public void addHasSheikhAlJazareeReference(Object newHasSheikhAlJazareeReference) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASSHEIKHALJAZAREEREFERENCE, newHasSheikhAlJazareeReference);
    }

    public void removeHasSheikhAlJazareeReference(Object oldHasSheikhAlJazareeReference) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HASSHEIKHALJAZAREEREFERENCE, oldHasSheikhAlJazareeReference);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/revelationOrder
     */
     
    public Collection<? extends Object> getRevelationOrder() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_REVELATIONORDER, Object.class);
    }

    public boolean hasRevelationOrder() {
		return !getRevelationOrder().isEmpty();
    }

    public void addRevelationOrder(Object newRevelationOrder) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_REVELATIONORDER, newRevelationOrder);
    }

    public void removeRevelationOrder(Object oldRevelationOrder) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_REVELATIONORDER, oldRevelationOrder);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/revelationPlace
     */
     
    public Collection<? extends Object> getRevelationPlace() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_REVELATIONPLACE, Object.class);
    }

    public boolean hasRevelationPlace() {
		return !getRevelationPlace().isEmpty();
    }

    public void addRevelationPlace(Object newRevelationPlace) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_REVELATIONPLACE, newRevelationPlace);
    }

    public void removeRevelationPlace(Object oldRevelationPlace) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_REVELATIONPLACE, oldRevelationPlace);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/verseAbsoluteIndex
     */
     
    public Collection<? extends Object> getVerseAbsoluteIndex() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSEABSOLUTEINDEX, Object.class);
    }

    public boolean hasVerseAbsoluteIndex() {
		return !getVerseAbsoluteIndex().isEmpty();
    }

    public void addVerseAbsoluteIndex(Object newVerseAbsoluteIndex) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSEABSOLUTEINDEX, newVerseAbsoluteIndex);
    }

    public void removeVerseAbsoluteIndex(Object oldVerseAbsoluteIndex) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSEABSOLUTEINDEX, oldVerseAbsoluteIndex);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/verseCount
     */
     
    public Collection<? extends Object> getVerseCount() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSECOUNT, Object.class);
    }

    public boolean hasVerseCount() {
		return !getVerseCount().isEmpty();
    }

    public void addVerseCount(Object newVerseCount) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSECOUNT, newVerseCount);
    }

    public void removeVerseCount(Object oldVerseCount) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSECOUNT, oldVerseCount);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/verseIndex
     */
     
    public Collection<? extends Object> getVerseIndex() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSEINDEX, Object.class);
    }

    public boolean hasVerseIndex() {
		return !getVerseIndex().isEmpty();
    }

    public void addVerseIndex(Object newVerseIndex) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSEINDEX, newVerseIndex);
    }

    public void removeVerseIndex(Object oldVerseIndex) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSEINDEX, oldVerseIndex);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/verseText
     */
     
    public Collection<? extends Object> getVerseText() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSETEXT, Object.class);
    }

    public boolean hasVerseText() {
		return !getVerseText().isEmpty();
    }

    public void addVerseText(Object newVerseText) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSETEXT, newVerseText);
    }

    public void removeVerseText(Object oldVerseText) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_VERSETEXT, oldVerseText);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/wordIndex
     */
     
    public Collection<? extends Object> getWordIndex() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDINDEX, Object.class);
    }

    public boolean hasWordIndex() {
		return !getWordIndex().isEmpty();
    }

    public void addWordIndex(Object newWordIndex) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDINDEX, newWordIndex);
    }

    public void removeWordIndex(Object oldWordIndex) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDINDEX, oldWordIndex);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/wordRoot
     */
     
    public Collection<? extends Object> getWordRoot() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDROOT, Object.class);
    }

    public boolean hasWordRoot() {
		return !getWordRoot().isEmpty();
    }

    public void addWordRoot(Object newWordRoot) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDROOT, newWordRoot);
    }

    public void removeWordRoot(Object oldWordRoot) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDROOT, oldWordRoot);
    }


    /* ***************************************************
     * Data Property http://www.semantictajweed.com/ontology/wordText
     */
     
    public Collection<? extends Object> getWordText() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDTEXT, Object.class);
    }

    public boolean hasWordText() {
		return !getWordText().isEmpty();
    }

    public void addWordText(Object newWordText) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDTEXT, newWordText);
    }

    public void removeWordText(Object oldWordText) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_WORDTEXT, oldWordText);
    }


    /* ***************************************************
     * Data Property http://www.w3.org/2000/01/rdf-schema#label
     */
     
    public Collection<? extends Object> getrdfs_label() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_rdfs_label, Object.class);
    }

    public boolean hasrdfs_label() {
		return !getrdfs_label().isEmpty();
    }

    public void addrdfs_label(Object newrdfs_label) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_rdfs_label, newrdfs_label);
    }

    public void removerdfs_label(Object oldrdfs_label) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_rdfs_label, oldrdfs_label);
    }


    /* ***************************************************
     * Data Property http://www.w3.org/2000/01/rdf-schema#seeAlso
     */
     
    public Collection<? extends Object> getrdfs_seeAlso() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_rdfs_seeAlso, Object.class);
    }

    public boolean hasrdfs_seeAlso() {
		return !getrdfs_seeAlso().isEmpty();
    }

    public void addrdfs_seeAlso(Object newrdfs_seeAlso) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_rdfs_seeAlso, newrdfs_seeAlso);
    }

    public void removerdfs_seeAlso(Object oldrdfs_seeAlso) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_rdfs_seeAlso, oldrdfs_seeAlso);
    }


    /* ***************************************************
     * Data Property http://www.w3.org/2002/07/owl#sameAs
     */
     
    public Collection<? extends Object> getowl_sameAs() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_owl_sameAs, Object.class);
    }

    public boolean hasowl_sameAs() {
		return !getowl_sameAs().isEmpty();
    }

    public void addowl_sameAs(Object newowl_sameAs) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_owl_sameAs, newowl_sameAs);
    }

    public void removeowl_sameAs(Object oldowl_sameAs) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_owl_sameAs, oldowl_sameAs);
    }


}
