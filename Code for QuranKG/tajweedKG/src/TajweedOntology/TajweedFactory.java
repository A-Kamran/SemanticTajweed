package TajweedOntology;

import TajweedOntology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: TajweedFactory<br>
 * @version generated on Tue Dec 31 23:36:30 PKT 2024 by amna
 */
public class TajweedFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public TajweedFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public TajweedFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/AnatomicalUnit
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/AnatomicalUnit", AnatomicalUnit.class, DefaultAnatomicalUnit.class);
    }

    /**
     * Creates an instance of type AnatomicalUnit.  Modifies the underlying ontology.
     */
    public AnatomicalUnit createAnatomicalUnit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANATOMICALUNIT, DefaultAnatomicalUnit.class);
    }

    /**
     * Gets an instance of type AnatomicalUnit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AnatomicalUnit getAnatomicalUnit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANATOMICALUNIT, DefaultAnatomicalUnit.class);
    }

    /**
     * Gets all instances of AnatomicalUnit from the ontology.
     */
    public Collection<? extends AnatomicalUnit> getAllAnatomicalUnitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANATOMICALUNIT, DefaultAnatomicalUnit.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/ApproximateArticulationPoint
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/ApproximateArticulationPoint", ApproximateArticulationPoint.class, DefaultApproximateArticulationPoint.class);
    }

    /**
     * Creates an instance of type ApproximateArticulationPoint.  Modifies the underlying ontology.
     */
    public ApproximateArticulationPoint createApproximateArticulationPoint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_APPROXIMATEARTICULATIONPOINT, DefaultApproximateArticulationPoint.class);
    }

    /**
     * Gets an instance of type ApproximateArticulationPoint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ApproximateArticulationPoint getApproximateArticulationPoint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_APPROXIMATEARTICULATIONPOINT, DefaultApproximateArticulationPoint.class);
    }

    /**
     * Gets all instances of ApproximateArticulationPoint from the ontology.
     */
    public Collection<? extends ApproximateArticulationPoint> getAllApproximateArticulationPointInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_APPROXIMATEARTICULATIONPOINT, DefaultApproximateArticulationPoint.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/AreaOfArticulation
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/AreaOfArticulation", AreaOfArticulation.class, DefaultAreaOfArticulation.class);
    }

    /**
     * Creates an instance of type AreaOfArticulation.  Modifies the underlying ontology.
     */
    public AreaOfArticulation createAreaOfArticulation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_AREAOFARTICULATION, DefaultAreaOfArticulation.class);
    }

    /**
     * Gets an instance of type AreaOfArticulation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AreaOfArticulation getAreaOfArticulation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_AREAOFARTICULATION, DefaultAreaOfArticulation.class);
    }

    /**
     * Gets all instances of AreaOfArticulation from the ontology.
     */
    public Collection<? extends AreaOfArticulation> getAllAreaOfArticulationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_AREAOFARTICULATION, DefaultAreaOfArticulation.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/ArticulationPoint
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/ArticulationPoint", ArticulationPoint.class, DefaultArticulationPoint.class);
    }

    /**
     * Creates an instance of type ArticulationPoint.  Modifies the underlying ontology.
     */
    public ArticulationPoint createArticulationPoint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTICULATIONPOINT, DefaultArticulationPoint.class);
    }

    /**
     * Gets an instance of type ArticulationPoint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ArticulationPoint getArticulationPoint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTICULATIONPOINT, DefaultArticulationPoint.class);
    }

    /**
     * Gets all instances of ArticulationPoint from the ontology.
     */
    public Collection<? extends ArticulationPoint> getAllArticulationPointInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTICULATIONPOINT, DefaultArticulationPoint.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/BasicCharacteristic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/BasicCharacteristic", BasicCharacteristic.class, DefaultBasicCharacteristic.class);
    }

    /**
     * Creates an instance of type BasicCharacteristic.  Modifies the underlying ontology.
     */
    public BasicCharacteristic createBasicCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BASICCHARACTERISTIC, DefaultBasicCharacteristic.class);
    }

    /**
     * Gets an instance of type BasicCharacteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BasicCharacteristic getBasicCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BASICCHARACTERISTIC, DefaultBasicCharacteristic.class);
    }

    /**
     * Gets all instances of BasicCharacteristic from the ontology.
     */
    public Collection<? extends BasicCharacteristic> getAllBasicCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BASICCHARACTERISTIC, DefaultBasicCharacteristic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/BasicHarakaat
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/BasicHarakaat", BasicHarakaat.class, DefaultBasicHarakaat.class);
    }

    /**
     * Creates an instance of type BasicHarakaat.  Modifies the underlying ontology.
     */
    public BasicHarakaat createBasicHarakaat(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BASICHARAKAAT, DefaultBasicHarakaat.class);
    }

    /**
     * Gets an instance of type BasicHarakaat with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public BasicHarakaat getBasicHarakaat(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BASICHARAKAAT, DefaultBasicHarakaat.class);
    }

    /**
     * Gets all instances of BasicHarakaat from the ontology.
     */
    public Collection<? extends BasicHarakaat> getAllBasicHarakaatInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BASICHARAKAAT, DefaultBasicHarakaat.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Chapter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Chapter", Chapter.class, DefaultChapter.class);
    }

    /**
     * Creates an instance of type Chapter.  Modifies the underlying ontology.
     */
    public Chapter createChapter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHAPTER, DefaultChapter.class);
    }

    /**
     * Gets an instance of type Chapter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Chapter getChapter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHAPTER, DefaultChapter.class);
    }

    /**
     * Gets all instances of Chapter from the ontology.
     */
    public Collection<? extends Chapter> getAllChapterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHAPTER, DefaultChapter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Characteristic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Characteristic", Characteristic.class, DefaultCharacteristic.class);
    }

    /**
     * Creates an instance of type Characteristic.  Modifies the underlying ontology.
     */
    public Characteristic createCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTIC, DefaultCharacteristic.class);
    }

    /**
     * Gets an instance of type Characteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Characteristic getCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTIC, DefaultCharacteristic.class);
    }

    /**
     * Gets all instances of Characteristic from the ontology.
     */
    public Collection<? extends Characteristic> getAllCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHARACTERISTIC, DefaultCharacteristic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/CharacteristicsWithOpposite
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/CharacteristicsWithOpposite", CharacteristicsWithOpposite.class, DefaultCharacteristicsWithOpposite.class);
    }

    /**
     * Creates an instance of type CharacteristicsWithOpposite.  Modifies the underlying ontology.
     */
    public CharacteristicsWithOpposite createCharacteristicsWithOpposite(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTICSWITHOPPOSITE, DefaultCharacteristicsWithOpposite.class);
    }

    /**
     * Gets an instance of type CharacteristicsWithOpposite with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CharacteristicsWithOpposite getCharacteristicsWithOpposite(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTICSWITHOPPOSITE, DefaultCharacteristicsWithOpposite.class);
    }

    /**
     * Gets all instances of CharacteristicsWithOpposite from the ontology.
     */
    public Collection<? extends CharacteristicsWithOpposite> getAllCharacteristicsWithOppositeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHARACTERISTICSWITHOPPOSITE, DefaultCharacteristicsWithOpposite.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/CharacteristicsWithoutOpposite
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/CharacteristicsWithoutOpposite", CharacteristicsWithoutOpposite.class, DefaultCharacteristicsWithoutOpposite.class);
    }

    /**
     * Creates an instance of type CharacteristicsWithoutOpposite.  Modifies the underlying ontology.
     */
    public CharacteristicsWithoutOpposite createCharacteristicsWithoutOpposite(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTICSWITHOUTOPPOSITE, DefaultCharacteristicsWithoutOpposite.class);
    }

    /**
     * Gets an instance of type CharacteristicsWithoutOpposite with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CharacteristicsWithoutOpposite getCharacteristicsWithoutOpposite(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHARACTERISTICSWITHOUTOPPOSITE, DefaultCharacteristicsWithoutOpposite.class);
    }

    /**
     * Gets all instances of CharacteristicsWithoutOpposite from the ontology.
     */
    public Collection<? extends CharacteristicsWithoutOpposite> getAllCharacteristicsWithoutOppositeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHARACTERISTICSWITHOUTOPPOSITE, DefaultCharacteristicsWithoutOpposite.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/CompleteIdghaamRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/CompleteIdghaamRule", CompleteIdghaamRule.class, DefaultCompleteIdghaamRule.class);
    }

    /**
     * Creates an instance of type CompleteIdghaamRule.  Modifies the underlying ontology.
     */
    public CompleteIdghaamRule createCompleteIdghaamRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPLETEIDGHAAMRULE, DefaultCompleteIdghaamRule.class);
    }

    /**
     * Gets an instance of type CompleteIdghaamRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CompleteIdghaamRule getCompleteIdghaamRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPLETEIDGHAAMRULE, DefaultCompleteIdghaamRule.class);
    }

    /**
     * Gets all instances of CompleteIdghaamRule from the ontology.
     */
    public Collection<? extends CompleteIdghaamRule> getAllCompleteIdghaamRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPLETEIDGHAAMRULE, DefaultCompleteIdghaamRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/CompleteIdghaamWithGhunnahLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/CompleteIdghaamWithGhunnahLetter", CompleteIdghaamWithGhunnahLetter.class, DefaultCompleteIdghaamWithGhunnahLetter.class);
    }

    /**
     * Creates an instance of type CompleteIdghaamWithGhunnahLetter.  Modifies the underlying ontology.
     */
    public CompleteIdghaamWithGhunnahLetter createCompleteIdghaamWithGhunnahLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPLETEIDGHAAMWITHGHUNNAHLETTER, DefaultCompleteIdghaamWithGhunnahLetter.class);
    }

    /**
     * Gets an instance of type CompleteIdghaamWithGhunnahLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public CompleteIdghaamWithGhunnahLetter getCompleteIdghaamWithGhunnahLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPLETEIDGHAAMWITHGHUNNAHLETTER, DefaultCompleteIdghaamWithGhunnahLetter.class);
    }

    /**
     * Gets all instances of CompleteIdghaamWithGhunnahLetter from the ontology.
     */
    public Collection<? extends CompleteIdghaamWithGhunnahLetter> getAllCompleteIdghaamWithGhunnahLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPLETEIDGHAAMWITHGHUNNAHLETTER, DefaultCompleteIdghaamWithGhunnahLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/ConditionalCharacteristic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/ConditionalCharacteristic", ConditionalCharacteristic.class, DefaultConditionalCharacteristic.class);
    }

    /**
     * Creates an instance of type ConditionalCharacteristic.  Modifies the underlying ontology.
     */
    public ConditionalCharacteristic createConditionalCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONDITIONALCHARACTERISTIC, DefaultConditionalCharacteristic.class);
    }

    /**
     * Gets an instance of type ConditionalCharacteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConditionalCharacteristic getConditionalCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONDITIONALCHARACTERISTIC, DefaultConditionalCharacteristic.class);
    }

    /**
     * Gets all instances of ConditionalCharacteristic from the ontology.
     */
    public Collection<? extends ConditionalCharacteristic> getAllConditionalCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONDITIONALCHARACTERISTIC, DefaultConditionalCharacteristic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/DammaDammatain
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/DammaDammatain", DammaDammatain.class, DefaultDammaDammatain.class);
    }

    /**
     * Creates an instance of type DammaDammatain.  Modifies the underlying ontology.
     */
    public DammaDammatain createDammaDammatain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DAMMADAMMATAIN, DefaultDammaDammatain.class);
    }

    /**
     * Gets an instance of type DammaDammatain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public DammaDammatain getDammaDammatain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DAMMADAMMATAIN, DefaultDammaDammatain.class);
    }

    /**
     * Gets all instances of DammaDammatain from the ontology.
     */
    public Collection<? extends DammaDammatain> getAllDammaDammatainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DAMMADAMMATAIN, DefaultDammaDammatain.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Diacritic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Diacritic", Diacritic.class, DefaultDiacritic.class);
    }

    /**
     * Creates an instance of type Diacritic.  Modifies the underlying ontology.
     */
    public Diacritic createDiacritic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIACRITIC, DefaultDiacritic.class);
    }

    /**
     * Gets an instance of type Diacritic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Diacritic getDiacritic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIACRITIC, DefaultDiacritic.class);
    }

    /**
     * Gets all instances of Diacritic from the ontology.
     */
    public Collection<? extends Diacritic> getAllDiacriticInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIACRITIC, DefaultDiacritic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/FathaDamma
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/FathaDamma", FathaDamma.class, DefaultFathaDamma.class);
    }

    /**
     * Creates an instance of type FathaDamma.  Modifies the underlying ontology.
     */
    public FathaDamma createFathaDamma(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FATHADAMMA, DefaultFathaDamma.class);
    }

    /**
     * Gets an instance of type FathaDamma with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FathaDamma getFathaDamma(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FATHADAMMA, DefaultFathaDamma.class);
    }

    /**
     * Gets all instances of FathaDamma from the ontology.
     */
    public Collection<? extends FathaDamma> getAllFathaDammaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FATHADAMMA, DefaultFathaDamma.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/FathaFathatain
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/FathaFathatain", FathaFathatain.class, DefaultFathaFathatain.class);
    }

    /**
     * Creates an instance of type FathaFathatain.  Modifies the underlying ontology.
     */
    public FathaFathatain createFathaFathatain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FATHAFATHATAIN, DefaultFathaFathatain.class);
    }

    /**
     * Gets an instance of type FathaFathatain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FathaFathatain getFathaFathatain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FATHAFATHATAIN, DefaultFathaFathatain.class);
    }

    /**
     * Gets all instances of FathaFathatain from the ontology.
     */
    public Collection<? extends FathaFathatain> getAllFathaFathatainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FATHAFATHATAIN, DefaultFathaFathatain.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/FathaKasra
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/FathaKasra", FathaKasra.class, DefaultFathaKasra.class);
    }

    /**
     * Creates an instance of type FathaKasra.  Modifies the underlying ontology.
     */
    public FathaKasra createFathaKasra(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FATHAKASRA, DefaultFathaKasra.class);
    }

    /**
     * Gets an instance of type FathaKasra with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FathaKasra getFathaKasra(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FATHAKASRA, DefaultFathaKasra.class);
    }

    /**
     * Gets all instances of FathaKasra from the ontology.
     */
    public Collection<? extends FathaKasra> getAllFathaKasraInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FATHAKASRA, DefaultFathaKasra.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/FathainDammain
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/FathainDammain", FathainDammain.class, DefaultFathainDammain.class);
    }

    /**
     * Creates an instance of type FathainDammain.  Modifies the underlying ontology.
     */
    public FathainDammain createFathainDammain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FATHAINDAMMAIN, DefaultFathainDammain.class);
    }

    /**
     * Gets an instance of type FathainDammain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public FathainDammain getFathainDammain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FATHAINDAMMAIN, DefaultFathainDammain.class);
    }

    /**
     * Gets all instances of FathainDammain from the ontology.
     */
    public Collection<? extends FathainDammain> getAllFathainDammainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FATHAINDAMMAIN, DefaultFathainDammain.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/GhunnahLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/GhunnahLetter", GhunnahLetter.class, DefaultGhunnahLetter.class);
    }

    /**
     * Creates an instance of type GhunnahLetter.  Modifies the underlying ontology.
     */
    public GhunnahLetter createGhunnahLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GHUNNAHLETTER, DefaultGhunnahLetter.class);
    }

    /**
     * Gets an instance of type GhunnahLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GhunnahLetter getGhunnahLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GHUNNAHLETTER, DefaultGhunnahLetter.class);
    }

    /**
     * Gets all instances of GhunnahLetter from the ontology.
     */
    public Collection<? extends GhunnahLetter> getAllGhunnahLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GHUNNAHLETTER, DefaultGhunnahLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/GhunnahRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/GhunnahRule", GhunnahRule.class, DefaultGhunnahRule.class);
    }

    /**
     * Creates an instance of type GhunnahRule.  Modifies the underlying ontology.
     */
    public GhunnahRule createGhunnahRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GHUNNAHRULE, DefaultGhunnahRule.class);
    }

    /**
     * Gets an instance of type GhunnahRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GhunnahRule getGhunnahRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GHUNNAHRULE, DefaultGhunnahRule.class);
    }

    /**
     * Gets all instances of GhunnahRule from the ontology.
     */
    public Collection<? extends GhunnahRule> getAllGhunnahRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GHUNNAHRULE, DefaultGhunnahRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/GroupOfLetters
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/GroupOfLetters", GroupOfLetters.class, DefaultGroupOfLetters.class);
    }

    /**
     * Creates an instance of type GroupOfLetters.  Modifies the underlying ontology.
     */
    public GroupOfLetters createGroupOfLetters(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GROUPOFLETTERS, DefaultGroupOfLetters.class);
    }

    /**
     * Gets an instance of type GroupOfLetters with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GroupOfLetters getGroupOfLetters(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GROUPOFLETTERS, DefaultGroupOfLetters.class);
    }

    /**
     * Gets all instances of GroupOfLetters from the ontology.
     */
    public Collection<? extends GroupOfLetters> getAllGroupOfLettersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GROUPOFLETTERS, DefaultGroupOfLetters.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HamzaLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HamzaLetter", HamzaLetter.class, DefaultHamzaLetter.class);
    }

    /**
     * Creates an instance of type HamzaLetter.  Modifies the underlying ontology.
     */
    public HamzaLetter createHamzaLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAMZALETTER, DefaultHamzaLetter.class);
    }

    /**
     * Gets an instance of type HamzaLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HamzaLetter getHamzaLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAMZALETTER, DefaultHamzaLetter.class);
    }

    /**
     * Gets all instances of HamzaLetter from the ontology.
     */
    public Collection<? extends HamzaLetter> getAllHamzaLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAMZALETTER, DefaultHamzaLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HamzatulwasalRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HamzatulwasalRule", HamzatulwasalRule.class, DefaultHamzatulwasalRule.class);
    }

    /**
     * Creates an instance of type HamzatulwasalRule.  Modifies the underlying ontology.
     */
    public HamzatulwasalRule createHamzatulwasalRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAMZATULWASALRULE, DefaultHamzatulwasalRule.class);
    }

    /**
     * Gets an instance of type HamzatulwasalRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HamzatulwasalRule getHamzatulwasalRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAMZATULWASALRULE, DefaultHamzatulwasalRule.class);
    }

    /**
     * Gets all instances of HamzatulwasalRule from the ontology.
     */
    public Collection<? extends HamzatulwasalRule> getAllHamzatulwasalRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAMZATULWASALRULE, DefaultHamzatulwasalRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofAshshafawiya
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofAshshafawiya", HaroofAshshafawiya.class, DefaultHaroofAshshafawiya.class);
    }

    /**
     * Creates an instance of type HaroofAshshafawiya.  Modifies the underlying ontology.
     */
    public HaroofAshshafawiya createHaroofAshshafawiya(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFASHSHAFAWIYA, DefaultHaroofAshshafawiya.class);
    }

    /**
     * Gets an instance of type HaroofAshshafawiya with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofAshshafawiya getHaroofAshshafawiya(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFASHSHAFAWIYA, DefaultHaroofAshshafawiya.class);
    }

    /**
     * Gets all instances of HaroofAshshafawiya from the ontology.
     */
    public Collection<? extends HaroofAshshafawiya> getAllHaroofAshshafawiyaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFASHSHAFAWIYA, DefaultHaroofAshshafawiya.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofeAlthalqeeyah
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofeAlthalqeeyah", HaroofeAlthalqeeyah.class, DefaultHaroofeAlthalqeeyah.class);
    }

    /**
     * Creates an instance of type HaroofeAlthalqeeyah.  Modifies the underlying ontology.
     */
    public HaroofeAlthalqeeyah createHaroofeAlthalqeeyah(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFEALTHALQEEYAH, DefaultHaroofeAlthalqeeyah.class);
    }

    /**
     * Gets an instance of type HaroofeAlthalqeeyah with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofeAlthalqeeyah getHaroofeAlthalqeeyah(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFEALTHALQEEYAH, DefaultHaroofeAlthalqeeyah.class);
    }

    /**
     * Gets all instances of HaroofeAlthalqeeyah from the ontology.
     */
    public Collection<? extends HaroofeAlthalqeeyah> getAllHaroofeAlthalqeeyahInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFEALTHALQEEYAH, DefaultHaroofeAlthalqeeyah.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofeLahawiyyayn
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofeLahawiyyayn", HaroofeLahawiyyayn.class, DefaultHaroofeLahawiyyayn.class);
    }

    /**
     * Creates an instance of type HaroofeLahawiyyayn.  Modifies the underlying ontology.
     */
    public HaroofeLahawiyyayn createHaroofeLahawiyyayn(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFELAHAWIYYAYN, DefaultHaroofeLahawiyyayn.class);
    }

    /**
     * Gets an instance of type HaroofeLahawiyyayn with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofeLahawiyyayn getHaroofeLahawiyyayn(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFELAHAWIYYAYN, DefaultHaroofeLahawiyyayn.class);
    }

    /**
     * Gets all instances of HaroofeLahawiyyayn from the ontology.
     */
    public Collection<? extends HaroofeLahawiyyayn> getAllHaroofeLahawiyyaynInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFELAHAWIYYAYN, DefaultHaroofeLahawiyyayn.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofeLathawiyya
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofeLathawiyya", HaroofeLathawiyya.class, DefaultHaroofeLathawiyya.class);
    }

    /**
     * Creates an instance of type HaroofeLathawiyya.  Modifies the underlying ontology.
     */
    public HaroofeLathawiyya createHaroofeLathawiyya(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFELATHAWIYYA, DefaultHaroofeLathawiyya.class);
    }

    /**
     * Gets an instance of type HaroofeLathawiyya with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofeLathawiyya getHaroofeLathawiyya(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFELATHAWIYYA, DefaultHaroofeLathawiyya.class);
    }

    /**
     * Gets all instances of HaroofeLathawiyya from the ontology.
     */
    public Collection<? extends HaroofeLathawiyya> getAllHaroofeLathawiyyaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFELATHAWIYYA, DefaultHaroofeLathawiyya.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofeMadeeya
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofeMadeeya", HaroofeMadeeya.class, DefaultHaroofeMadeeya.class);
    }

    /**
     * Creates an instance of type HaroofeMadeeya.  Modifies the underlying ontology.
     */
    public HaroofeMadeeya createHaroofeMadeeya(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFEMADEEYA, DefaultHaroofeMadeeya.class);
    }

    /**
     * Gets an instance of type HaroofeMadeeya with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofeMadeeya getHaroofeMadeeya(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFEMADEEYA, DefaultHaroofeMadeeya.class);
    }

    /**
     * Gets all instances of HaroofeMadeeya from the ontology.
     */
    public Collection<? extends HaroofeMadeeya> getAllHaroofeMadeeyaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFEMADEEYA, DefaultHaroofeMadeeya.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofeNatiyya
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofeNatiyya", HaroofeNatiyya.class, DefaultHaroofeNatiyya.class);
    }

    /**
     * Creates an instance of type HaroofeNatiyya.  Modifies the underlying ontology.
     */
    public HaroofeNatiyya createHaroofeNatiyya(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFENATIYYA, DefaultHaroofeNatiyya.class);
    }

    /**
     * Gets an instance of type HaroofeNatiyya with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofeNatiyya getHaroofeNatiyya(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFENATIYYA, DefaultHaroofeNatiyya.class);
    }

    /**
     * Gets all instances of HaroofeNatiyya from the ontology.
     */
    public Collection<? extends HaroofeNatiyya> getAllHaroofeNatiyyaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFENATIYYA, DefaultHaroofeNatiyya.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofeSaafir
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofeSaafir", HaroofeSaafir.class, DefaultHaroofeSaafir.class);
    }

    /**
     * Creates an instance of type HaroofeSaafir.  Modifies the underlying ontology.
     */
    public HaroofeSaafir createHaroofeSaafir(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFESAAFIR, DefaultHaroofeSaafir.class);
    }

    /**
     * Gets an instance of type HaroofeSaafir with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofeSaafir getHaroofeSaafir(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFESAAFIR, DefaultHaroofeSaafir.class);
    }

    /**
     * Gets all instances of HaroofeSaafir from the ontology.
     */
    public Collection<? extends HaroofeSaafir> getAllHaroofeSaafirInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFESAAFIR, DefaultHaroofeSaafir.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/HaroofeShajariya
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/HaroofeShajariya", HaroofeShajariya.class, DefaultHaroofeShajariya.class);
    }

    /**
     * Creates an instance of type HaroofeShajariya.  Modifies the underlying ontology.
     */
    public HaroofeShajariya createHaroofeShajariya(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HAROOFESHAJARIYA, DefaultHaroofeShajariya.class);
    }

    /**
     * Gets an instance of type HaroofeShajariya with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public HaroofeShajariya getHaroofeShajariya(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HAROOFESHAJARIYA, DefaultHaroofeShajariya.class);
    }

    /**
     * Gets all instances of HaroofeShajariya from the ontology.
     */
    public Collection<? extends HaroofeShajariya> getAllHaroofeShajariyaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HAROOFESHAJARIYA, DefaultHaroofeShajariya.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IdghaamMutajanisainLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IdghaamMutajanisainLetter", IdghaamMutajanisainLetter.class, DefaultIdghaamMutajanisainLetter.class);
    }

    /**
     * Creates an instance of type IdghaamMutajanisainLetter.  Modifies the underlying ontology.
     */
    public IdghaamMutajanisainLetter createIdghaamMutajanisainLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMMUTAJANISAINLETTER, DefaultIdghaamMutajanisainLetter.class);
    }

    /**
     * Gets an instance of type IdghaamMutajanisainLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IdghaamMutajanisainLetter getIdghaamMutajanisainLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMMUTAJANISAINLETTER, DefaultIdghaamMutajanisainLetter.class);
    }

    /**
     * Gets all instances of IdghaamMutajanisainLetter from the ontology.
     */
    public Collection<? extends IdghaamMutajanisainLetter> getAllIdghaamMutajanisainLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDGHAAMMUTAJANISAINLETTER, DefaultIdghaamMutajanisainLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IdghaamRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IdghaamRule", IdghaamRule.class, DefaultIdghaamRule.class);
    }

    /**
     * Creates an instance of type IdghaamRule.  Modifies the underlying ontology.
     */
    public IdghaamRule createIdghaamRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMRULE, DefaultIdghaamRule.class);
    }

    /**
     * Gets an instance of type IdghaamRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IdghaamRule getIdghaamRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMRULE, DefaultIdghaamRule.class);
    }

    /**
     * Gets all instances of IdghaamRule from the ontology.
     */
    public Collection<? extends IdghaamRule> getAllIdghaamRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDGHAAMRULE, DefaultIdghaamRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IdghaamShafawiLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IdghaamShafawiLetter", IdghaamShafawiLetter.class, DefaultIdghaamShafawiLetter.class);
    }

    /**
     * Creates an instance of type IdghaamShafawiLetter.  Modifies the underlying ontology.
     */
    public IdghaamShafawiLetter createIdghaamShafawiLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMSHAFAWILETTER, DefaultIdghaamShafawiLetter.class);
    }

    /**
     * Gets an instance of type IdghaamShafawiLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IdghaamShafawiLetter getIdghaamShafawiLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMSHAFAWILETTER, DefaultIdghaamShafawiLetter.class);
    }

    /**
     * Gets all instances of IdghaamShafawiLetter from the ontology.
     */
    public Collection<? extends IdghaamShafawiLetter> getAllIdghaamShafawiLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDGHAAMSHAFAWILETTER, DefaultIdghaamShafawiLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IdghaamWithGhunnahLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IdghaamWithGhunnahLetter", IdghaamWithGhunnahLetter.class, DefaultIdghaamWithGhunnahLetter.class);
    }

    /**
     * Creates an instance of type IdghaamWithGhunnahLetter.  Modifies the underlying ontology.
     */
    public IdghaamWithGhunnahLetter createIdghaamWithGhunnahLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMWITHGHUNNAHLETTER, DefaultIdghaamWithGhunnahLetter.class);
    }

    /**
     * Gets an instance of type IdghaamWithGhunnahLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IdghaamWithGhunnahLetter getIdghaamWithGhunnahLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMWITHGHUNNAHLETTER, DefaultIdghaamWithGhunnahLetter.class);
    }

    /**
     * Gets all instances of IdghaamWithGhunnahLetter from the ontology.
     */
    public Collection<? extends IdghaamWithGhunnahLetter> getAllIdghaamWithGhunnahLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDGHAAMWITHGHUNNAHLETTER, DefaultIdghaamWithGhunnahLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IdghaamWithoutGhunnahLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IdghaamWithoutGhunnahLetter", IdghaamWithoutGhunnahLetter.class, DefaultIdghaamWithoutGhunnahLetter.class);
    }

    /**
     * Creates an instance of type IdghaamWithoutGhunnahLetter.  Modifies the underlying ontology.
     */
    public IdghaamWithoutGhunnahLetter createIdghaamWithoutGhunnahLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMWITHOUTGHUNNAHLETTER, DefaultIdghaamWithoutGhunnahLetter.class);
    }

    /**
     * Gets an instance of type IdghaamWithoutGhunnahLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IdghaamWithoutGhunnahLetter getIdghaamWithoutGhunnahLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IDGHAAMWITHOUTGHUNNAHLETTER, DefaultIdghaamWithoutGhunnahLetter.class);
    }

    /**
     * Gets all instances of IdghaamWithoutGhunnahLetter from the ontology.
     */
    public Collection<? extends IdghaamWithoutGhunnahLetter> getAllIdghaamWithoutGhunnahLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IDGHAAMWITHOUTGHUNNAHLETTER, DefaultIdghaamWithoutGhunnahLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IkhfaLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IkhfaLetter", IkhfaLetter.class, DefaultIkhfaLetter.class);
    }

    /**
     * Creates an instance of type IkhfaLetter.  Modifies the underlying ontology.
     */
    public IkhfaLetter createIkhfaLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IKHFALETTER, DefaultIkhfaLetter.class);
    }

    /**
     * Gets an instance of type IkhfaLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IkhfaLetter getIkhfaLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IKHFALETTER, DefaultIkhfaLetter.class);
    }

    /**
     * Gets all instances of IkhfaLetter from the ontology.
     */
    public Collection<? extends IkhfaLetter> getAllIkhfaLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IKHFALETTER, DefaultIkhfaLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IkhfaShafawiLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IkhfaShafawiLetter", IkhfaShafawiLetter.class, DefaultIkhfaShafawiLetter.class);
    }

    /**
     * Creates an instance of type IkhfaShafawiLetter.  Modifies the underlying ontology.
     */
    public IkhfaShafawiLetter createIkhfaShafawiLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IKHFASHAFAWILETTER, DefaultIkhfaShafawiLetter.class);
    }

    /**
     * Gets an instance of type IkhfaShafawiLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IkhfaShafawiLetter getIkhfaShafawiLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IKHFASHAFAWILETTER, DefaultIkhfaShafawiLetter.class);
    }

    /**
     * Gets all instances of IkhfaShafawiLetter from the ontology.
     */
    public Collection<? extends IkhfaShafawiLetter> getAllIkhfaShafawiLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IKHFASHAFAWILETTER, DefaultIkhfaShafawiLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IncompleteIdghaamRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IncompleteIdghaamRule", IncompleteIdghaamRule.class, DefaultIncompleteIdghaamRule.class);
    }

    /**
     * Creates an instance of type IncompleteIdghaamRule.  Modifies the underlying ontology.
     */
    public IncompleteIdghaamRule createIncompleteIdghaamRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INCOMPLETEIDGHAAMRULE, DefaultIncompleteIdghaamRule.class);
    }

    /**
     * Gets an instance of type IncompleteIdghaamRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IncompleteIdghaamRule getIncompleteIdghaamRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INCOMPLETEIDGHAAMRULE, DefaultIncompleteIdghaamRule.class);
    }

    /**
     * Gets all instances of IncompleteIdghaamRule from the ontology.
     */
    public Collection<? extends IncompleteIdghaamRule> getAllIncompleteIdghaamRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INCOMPLETEIDGHAAMRULE, DefaultIncompleteIdghaamRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IncompleteIdghaamWithGhunnahLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IncompleteIdghaamWithGhunnahLetter", IncompleteIdghaamWithGhunnahLetter.class, DefaultIncompleteIdghaamWithGhunnahLetter.class);
    }

    /**
     * Creates an instance of type IncompleteIdghaamWithGhunnahLetter.  Modifies the underlying ontology.
     */
    public IncompleteIdghaamWithGhunnahLetter createIncompleteIdghaamWithGhunnahLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INCOMPLETEIDGHAAMWITHGHUNNAHLETTER, DefaultIncompleteIdghaamWithGhunnahLetter.class);
    }

    /**
     * Gets an instance of type IncompleteIdghaamWithGhunnahLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IncompleteIdghaamWithGhunnahLetter getIncompleteIdghaamWithGhunnahLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INCOMPLETEIDGHAAMWITHGHUNNAHLETTER, DefaultIncompleteIdghaamWithGhunnahLetter.class);
    }

    /**
     * Gets all instances of IncompleteIdghaamWithGhunnahLetter from the ontology.
     */
    public Collection<? extends IncompleteIdghaamWithGhunnahLetter> getAllIncompleteIdghaamWithGhunnahLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INCOMPLETEIDGHAAMWITHGHUNNAHLETTER, DefaultIncompleteIdghaamWithGhunnahLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IqlabLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IqlabLetter", IqlabLetter.class, DefaultIqlabLetter.class);
    }

    /**
     * Creates an instance of type IqlabLetter.  Modifies the underlying ontology.
     */
    public IqlabLetter createIqlabLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IQLABLETTER, DefaultIqlabLetter.class);
    }

    /**
     * Gets an instance of type IqlabLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IqlabLetter getIqlabLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IQLABLETTER, DefaultIqlabLetter.class);
    }

    /**
     * Gets all instances of IqlabLetter from the ontology.
     */
    public Collection<? extends IqlabLetter> getAllIqlabLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IQLABLETTER, DefaultIqlabLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IzharLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IzharLetter", IzharLetter.class, DefaultIzharLetter.class);
    }

    /**
     * Creates an instance of type IzharLetter.  Modifies the underlying ontology.
     */
    public IzharLetter createIzharLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IZHARLETTER, DefaultIzharLetter.class);
    }

    /**
     * Gets an instance of type IzharLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IzharLetter getIzharLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IZHARLETTER, DefaultIzharLetter.class);
    }

    /**
     * Gets all instances of IzharLetter from the ontology.
     */
    public Collection<? extends IzharLetter> getAllIzharLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IZHARLETTER, DefaultIzharLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/IzharShafawiLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/IzharShafawiLetter", IzharShafawiLetter.class, DefaultIzharShafawiLetter.class);
    }

    /**
     * Creates an instance of type IzharShafawiLetter.  Modifies the underlying ontology.
     */
    public IzharShafawiLetter createIzharShafawiLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IZHARSHAFAWILETTER, DefaultIzharShafawiLetter.class);
    }

    /**
     * Gets an instance of type IzharShafawiLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IzharShafawiLetter getIzharShafawiLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IZHARSHAFAWILETTER, DefaultIzharShafawiLetter.class);
    }

    /**
     * Gets all instances of IzharShafawiLetter from the ontology.
     */
    public Collection<? extends IzharShafawiLetter> getAllIzharShafawiLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IZHARSHAFAWILETTER, DefaultIzharShafawiLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/KasraKasratain
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/KasraKasratain", KasraKasratain.class, DefaultKasraKasratain.class);
    }

    /**
     * Creates an instance of type KasraKasratain.  Modifies the underlying ontology.
     */
    public KasraKasratain createKasraKasratain(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_KASRAKASRATAIN, DefaultKasraKasratain.class);
    }

    /**
     * Gets an instance of type KasraKasratain with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public KasraKasratain getKasraKasratain(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_KASRAKASRATAIN, DefaultKasraKasratain.class);
    }

    /**
     * Gets all instances of KasraKasratain from the ontology.
     */
    public Collection<? extends KasraKasratain> getAllKasraKasratainInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_KASRAKASRATAIN, DefaultKasraKasratain.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/LaamRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/LaamRule", LaamRule.class, DefaultLaamRule.class);
    }

    /**
     * Creates an instance of type LaamRule.  Modifies the underlying ontology.
     */
    public LaamRule createLaamRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LAAMRULE, DefaultLaamRule.class);
    }

    /**
     * Gets an instance of type LaamRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LaamRule getLaamRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LAAMRULE, DefaultLaamRule.class);
    }

    /**
     * Gets all instances of LaamRule from the ontology.
     */
    public Collection<? extends LaamRule> getAllLaamRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LAAMRULE, DefaultLaamRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Letter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Letter", Letter.class, DefaultLetter.class);
    }

    /**
     * Creates an instance of type Letter.  Modifies the underlying ontology.
     */
    public Letter createLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LETTER, DefaultLetter.class);
    }

    /**
     * Gets an instance of type Letter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Letter getLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LETTER, DefaultLetter.class);
    }

    /**
     * Gets all instances of Letter from the ontology.
     */
    public Collection<? extends Letter> getAllLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LETTER, DefaultLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/LetterOccurrence
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/LetterOccurrence", LetterOccurrence.class, DefaultLetterOccurrence.class);
    }

    /**
     * Creates an instance of type LetterOccurrence.  Modifies the underlying ontology.
     */
    public LetterOccurrence createLetterOccurrence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LETTEROCCURRENCE, DefaultLetterOccurrence.class);
    }

    /**
     * Gets an instance of type LetterOccurrence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LetterOccurrence getLetterOccurrence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LETTEROCCURRENCE, DefaultLetterOccurrence.class);
    }

    /**
     * Gets all instances of LetterOccurrence from the ontology.
     */
    public Collection<? extends LetterOccurrence> getAllLetterOccurrenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LETTEROCCURRENCE, DefaultLetterOccurrence.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/LexicalEntity
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/LexicalEntity", LexicalEntity.class, DefaultLexicalEntity.class);
    }

    /**
     * Creates an instance of type LexicalEntity.  Modifies the underlying ontology.
     */
    public LexicalEntity createLexicalEntity(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LEXICALENTITY, DefaultLexicalEntity.class);
    }

    /**
     * Gets an instance of type LexicalEntity with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public LexicalEntity getLexicalEntity(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LEXICALENTITY, DefaultLexicalEntity.class);
    }

    /**
     * Gets all instances of LexicalEntity from the ontology.
     */
    public Collection<? extends LexicalEntity> getAllLexicalEntityInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LEXICALENTITY, DefaultLexicalEntity.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MadLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MadLetter", MadLetter.class, DefaultMadLetter.class);
    }

    /**
     * Creates an instance of type MadLetter.  Modifies the underlying ontology.
     */
    public MadLetter createMadLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MADLETTER, DefaultMadLetter.class);
    }

    /**
     * Gets an instance of type MadLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MadLetter getMadLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MADLETTER, DefaultMadLetter.class);
    }

    /**
     * Gets all instances of MadLetter from the ontology.
     */
    public Collection<? extends MadLetter> getAllMadLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MADLETTER, DefaultMadLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeddDiacritic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeddDiacritic", MeddDiacritic.class, DefaultMeddDiacritic.class);
    }

    /**
     * Creates an instance of type MeddDiacritic.  Modifies the underlying ontology.
     */
    public MeddDiacritic createMeddDiacritic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDDDIACRITIC, DefaultMeddDiacritic.class);
    }

    /**
     * Gets an instance of type MeddDiacritic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeddDiacritic getMeddDiacritic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDDDIACRITIC, DefaultMeddDiacritic.class);
    }

    /**
     * Gets all instances of MeddDiacritic from the ontology.
     */
    public Collection<? extends MeddDiacritic> getAllMeddDiacriticInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDDDIACRITIC, DefaultMeddDiacritic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeddLaazim
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeddLaazim", MeddLaazim.class, DefaultMeddLaazim.class);
    }

    /**
     * Creates an instance of type MeddLaazim.  Modifies the underlying ontology.
     */
    public MeddLaazim createMeddLaazim(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDDLAAZIM, DefaultMeddLaazim.class);
    }

    /**
     * Gets an instance of type MeddLaazim with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeddLaazim getMeddLaazim(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDDLAAZIM, DefaultMeddLaazim.class);
    }

    /**
     * Gets all instances of MeddLaazim from the ontology.
     */
    public Collection<? extends MeddLaazim> getAllMeddLaazimInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDDLAAZIM, DefaultMeddLaazim.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeddLaazimKalmi
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeddLaazimKalmi", MeddLaazimKalmi.class, DefaultMeddLaazimKalmi.class);
    }

    /**
     * Creates an instance of type MeddLaazimKalmi.  Modifies the underlying ontology.
     */
    public MeddLaazimKalmi createMeddLaazimKalmi(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDDLAAZIMKALMI, DefaultMeddLaazimKalmi.class);
    }

    /**
     * Gets an instance of type MeddLaazimKalmi with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeddLaazimKalmi getMeddLaazimKalmi(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDDLAAZIMKALMI, DefaultMeddLaazimKalmi.class);
    }

    /**
     * Gets all instances of MeddLaazimKalmi from the ontology.
     */
    public Collection<? extends MeddLaazimKalmi> getAllMeddLaazimKalmiInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDDLAAZIMKALMI, DefaultMeddLaazimKalmi.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeddLeen
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeddLeen", MeddLeen.class, DefaultMeddLeen.class);
    }

    /**
     * Creates an instance of type MeddLeen.  Modifies the underlying ontology.
     */
    public MeddLeen createMeddLeen(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDDLEEN, DefaultMeddLeen.class);
    }

    /**
     * Gets an instance of type MeddLeen with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeddLeen getMeddLeen(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDDLEEN, DefaultMeddLeen.class);
    }

    /**
     * Gets all instances of MeddLeen from the ontology.
     */
    public Collection<? extends MeddLeen> getAllMeddLeenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDDLEEN, DefaultMeddLeen.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeddOnStoppingRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeddOnStoppingRule", MeddOnStoppingRule.class, DefaultMeddOnStoppingRule.class);
    }

    /**
     * Creates an instance of type MeddOnStoppingRule.  Modifies the underlying ontology.
     */
    public MeddOnStoppingRule createMeddOnStoppingRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDDONSTOPPINGRULE, DefaultMeddOnStoppingRule.class);
    }

    /**
     * Gets an instance of type MeddOnStoppingRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeddOnStoppingRule getMeddOnStoppingRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDDONSTOPPINGRULE, DefaultMeddOnStoppingRule.class);
    }

    /**
     * Gets all instances of MeddOnStoppingRule from the ontology.
     */
    public Collection<? extends MeddOnStoppingRule> getAllMeddOnStoppingRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDDONSTOPPINGRULE, DefaultMeddOnStoppingRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeddRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeddRule", MeddRule.class, DefaultMeddRule.class);
    }

    /**
     * Creates an instance of type MeddRule.  Modifies the underlying ontology.
     */
    public MeddRule createMeddRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDDRULE, DefaultMeddRule.class);
    }

    /**
     * Gets an instance of type MeddRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeddRule getMeddRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDDRULE, DefaultMeddRule.class);
    }

    /**
     * Gets all instances of MeddRule from the ontology.
     */
    public Collection<? extends MeddRule> getAllMeddRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDDRULE, DefaultMeddRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeddSilaRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeddSilaRule", MeddSilaRule.class, DefaultMeddSilaRule.class);
    }

    /**
     * Creates an instance of type MeddSilaRule.  Modifies the underlying ontology.
     */
    public MeddSilaRule createMeddSilaRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDDSILARULE, DefaultMeddSilaRule.class);
    }

    /**
     * Gets an instance of type MeddSilaRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeddSilaRule getMeddSilaRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDDSILARULE, DefaultMeddSilaRule.class);
    }

    /**
     * Gets all instances of MeddSilaRule from the ontology.
     */
    public Collection<? extends MeddSilaRule> getAllMeddSilaRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDDSILARULE, DefaultMeddSilaRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MeemSakinahRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MeemSakinahRule", MeemSakinahRule.class, DefaultMeemSakinahRule.class);
    }

    /**
     * Creates an instance of type MeemSakinahRule.  Modifies the underlying ontology.
     */
    public MeemSakinahRule createMeemSakinahRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEEMSAKINAHRULE, DefaultMeemSakinahRule.class);
    }

    /**
     * Gets an instance of type MeemSakinahRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MeemSakinahRule getMeemSakinahRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEEMSAKINAHRULE, DefaultMeemSakinahRule.class);
    }

    /**
     * Gets all instances of MeemSakinahRule from the ontology.
     */
    public Collection<? extends MeemSakinahRule> getAllMeemSakinahRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEEMSAKINAHRULE, DefaultMeemSakinahRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/MiddleCharacteristic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/MiddleCharacteristic", MiddleCharacteristic.class, DefaultMiddleCharacteristic.class);
    }

    /**
     * Creates an instance of type MiddleCharacteristic.  Modifies the underlying ontology.
     */
    public MiddleCharacteristic createMiddleCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIDDLECHARACTERISTIC, DefaultMiddleCharacteristic.class);
    }

    /**
     * Gets an instance of type MiddleCharacteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MiddleCharacteristic getMiddleCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIDDLECHARACTERISTIC, DefaultMiddleCharacteristic.class);
    }

    /**
     * Gets all instances of MiddleCharacteristic from the ontology.
     */
    public Collection<? extends MiddleCharacteristic> getAllMiddleCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIDDLECHARACTERISTIC, DefaultMiddleCharacteristic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NabrRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NabrRule", NabrRule.class, DefaultNabrRule.class);
    }

    /**
     * Creates an instance of type NabrRule.  Modifies the underlying ontology.
     */
    public NabrRule createNabrRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NABRRULE, DefaultNabrRule.class);
    }

    /**
     * Gets an instance of type NabrRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NabrRule getNabrRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NABRRULE, DefaultNabrRule.class);
    }

    /**
     * Gets all instances of NabrRule from the ontology.
     */
    public Collection<? extends NabrRule> getAllNabrRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NABRRULE, DefaultNabrRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NaturalLeenRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NaturalLeenRule", NaturalLeenRule.class, DefaultNaturalLeenRule.class);
    }

    /**
     * Creates an instance of type NaturalLeenRule.  Modifies the underlying ontology.
     */
    public NaturalLeenRule createNaturalLeenRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NATURALLEENRULE, DefaultNaturalLeenRule.class);
    }

    /**
     * Gets an instance of type NaturalLeenRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NaturalLeenRule getNaturalLeenRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NATURALLEENRULE, DefaultNaturalLeenRule.class);
    }

    /**
     * Gets all instances of NaturalLeenRule from the ontology.
     */
    public Collection<? extends NaturalLeenRule> getAllNaturalLeenRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NATURALLEENRULE, DefaultNaturalLeenRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NaturalMeddDerived
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NaturalMeddDerived", NaturalMeddDerived.class, DefaultNaturalMeddDerived.class);
    }

    /**
     * Creates an instance of type NaturalMeddDerived.  Modifies the underlying ontology.
     */
    public NaturalMeddDerived createNaturalMeddDerived(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NATURALMEDDDERIVED, DefaultNaturalMeddDerived.class);
    }

    /**
     * Gets an instance of type NaturalMeddDerived with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NaturalMeddDerived getNaturalMeddDerived(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NATURALMEDDDERIVED, DefaultNaturalMeddDerived.class);
    }

    /**
     * Gets all instances of NaturalMeddDerived from the ontology.
     */
    public Collection<? extends NaturalMeddDerived> getAllNaturalMeddDerivedInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NATURALMEDDDERIVED, DefaultNaturalMeddDerived.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NaturalMeddPrimary
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NaturalMeddPrimary", NaturalMeddPrimary.class, DefaultNaturalMeddPrimary.class);
    }

    /**
     * Creates an instance of type NaturalMeddPrimary.  Modifies the underlying ontology.
     */
    public NaturalMeddPrimary createNaturalMeddPrimary(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NATURALMEDDPRIMARY, DefaultNaturalMeddPrimary.class);
    }

    /**
     * Gets an instance of type NaturalMeddPrimary with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NaturalMeddPrimary getNaturalMeddPrimary(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NATURALMEDDPRIMARY, DefaultNaturalMeddPrimary.class);
    }

    /**
     * Gets all instances of NaturalMeddPrimary from the ontology.
     */
    public Collection<? extends NaturalMeddPrimary> getAllNaturalMeddPrimaryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NATURALMEDDPRIMARY, DefaultNaturalMeddPrimary.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NaturalMeddRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NaturalMeddRule", NaturalMeddRule.class, DefaultNaturalMeddRule.class);
    }

    /**
     * Creates an instance of type NaturalMeddRule.  Modifies the underlying ontology.
     */
    public NaturalMeddRule createNaturalMeddRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NATURALMEDDRULE, DefaultNaturalMeddRule.class);
    }

    /**
     * Gets an instance of type NaturalMeddRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NaturalMeddRule getNaturalMeddRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NATURALMEDDRULE, DefaultNaturalMeddRule.class);
    }

    /**
     * Gets all instances of NaturalMeddRule from the ontology.
     */
    public Collection<? extends NaturalMeddRule> getAllNaturalMeddRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NATURALMEDDRULE, DefaultNaturalMeddRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NonBasicDiacritic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NonBasicDiacritic", NonBasicDiacritic.class, DefaultNonBasicDiacritic.class);
    }

    /**
     * Creates an instance of type NonBasicDiacritic.  Modifies the underlying ontology.
     */
    public NonBasicDiacritic createNonBasicDiacritic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONBASICDIACRITIC, DefaultNonBasicDiacritic.class);
    }

    /**
     * Gets an instance of type NonBasicDiacritic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonBasicDiacritic getNonBasicDiacritic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONBASICDIACRITIC, DefaultNonBasicDiacritic.class);
    }

    /**
     * Gets all instances of NonBasicDiacritic from the ontology.
     */
    public Collection<? extends NonBasicDiacritic> getAllNonBasicDiacriticInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONBASICDIACRITIC, DefaultNonBasicDiacritic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NonGhunnahLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NonGhunnahLetter", NonGhunnahLetter.class, DefaultNonGhunnahLetter.class);
    }

    /**
     * Creates an instance of type NonGhunnahLetter.  Modifies the underlying ontology.
     */
    public NonGhunnahLetter createNonGhunnahLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONGHUNNAHLETTER, DefaultNonGhunnahLetter.class);
    }

    /**
     * Gets an instance of type NonGhunnahLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonGhunnahLetter getNonGhunnahLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONGHUNNAHLETTER, DefaultNonGhunnahLetter.class);
    }

    /**
     * Gets all instances of NonGhunnahLetter from the ontology.
     */
    public Collection<? extends NonGhunnahLetter> getAllNonGhunnahLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONGHUNNAHLETTER, DefaultNonGhunnahLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NonHaaYaaLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NonHaaYaaLetter", NonHaaYaaLetter.class, DefaultNonHaaYaaLetter.class);
    }

    /**
     * Creates an instance of type NonHaaYaaLetter.  Modifies the underlying ontology.
     */
    public NonHaaYaaLetter createNonHaaYaaLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONHAAYAALETTER, DefaultNonHaaYaaLetter.class);
    }

    /**
     * Gets an instance of type NonHaaYaaLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonHaaYaaLetter getNonHaaYaaLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONHAAYAALETTER, DefaultNonHaaYaaLetter.class);
    }

    /**
     * Gets all instances of NonHaaYaaLetter from the ontology.
     */
    public Collection<? extends NonHaaYaaLetter> getAllNonHaaYaaLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONHAAYAALETTER, DefaultNonHaaYaaLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NonPronouncedDiacritic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NonPronouncedDiacritic", NonPronouncedDiacritic.class, DefaultNonPronouncedDiacritic.class);
    }

    /**
     * Creates an instance of type NonPronouncedDiacritic.  Modifies the underlying ontology.
     */
    public NonPronouncedDiacritic createNonPronouncedDiacritic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NONPRONOUNCEDDIACRITIC, DefaultNonPronouncedDiacritic.class);
    }

    /**
     * Gets an instance of type NonPronouncedDiacritic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NonPronouncedDiacritic getNonPronouncedDiacritic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NONPRONOUNCEDDIACRITIC, DefaultNonPronouncedDiacritic.class);
    }

    /**
     * Gets all instances of NonPronouncedDiacritic from the ontology.
     */
    public Collection<? extends NonPronouncedDiacritic> getAllNonPronouncedDiacriticInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NONPRONOUNCEDDIACRITIC, DefaultNonPronouncedDiacritic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NoonSakinahAndTanweenRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NoonSakinahAndTanweenRule", NoonSakinahAndTanweenRule.class, DefaultNoonSakinahAndTanweenRule.class);
    }

    /**
     * Creates an instance of type NoonSakinahAndTanweenRule.  Modifies the underlying ontology.
     */
    public NoonSakinahAndTanweenRule createNoonSakinahAndTanweenRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NOONSAKINAHANDTANWEENRULE, DefaultNoonSakinahAndTanweenRule.class);
    }

    /**
     * Gets an instance of type NoonSakinahAndTanweenRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NoonSakinahAndTanweenRule getNoonSakinahAndTanweenRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NOONSAKINAHANDTANWEENRULE, DefaultNoonSakinahAndTanweenRule.class);
    }

    /**
     * Gets all instances of NoonSakinahAndTanweenRule from the ontology.
     */
    public Collection<? extends NoonSakinahAndTanweenRule> getAllNoonSakinahAndTanweenRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NOONSAKINAHANDTANWEENRULE, DefaultNoonSakinahAndTanweenRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/NotKasra
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/NotKasra", NotKasra.class, DefaultNotKasra.class);
    }

    /**
     * Creates an instance of type NotKasra.  Modifies the underlying ontology.
     */
    public NotKasra createNotKasra(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NOTKASRA, DefaultNotKasra.class);
    }

    /**
     * Gets an instance of type NotKasra with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NotKasra getNotKasra(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NOTKASRA, DefaultNotKasra.class);
    }

    /**
     * Gets all instances of NotKasra from the ontology.
     */
    public Collection<? extends NotKasra> getAllNotKasraInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NOTKASRA, DefaultNotKasra.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/PauseMarker
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/PauseMarker", PauseMarker.class, DefaultPauseMarker.class);
    }

    /**
     * Creates an instance of type PauseMarker.  Modifies the underlying ontology.
     */
    public PauseMarker createPauseMarker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PAUSEMARKER, DefaultPauseMarker.class);
    }

    /**
     * Gets an instance of type PauseMarker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PauseMarker getPauseMarker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PAUSEMARKER, DefaultPauseMarker.class);
    }

    /**
     * Gets all instances of PauseMarker from the ontology.
     */
    public Collection<? extends PauseMarker> getAllPauseMarkerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PAUSEMARKER, DefaultPauseMarker.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/PermanentTafkheemLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/PermanentTafkheemLetter", PermanentTafkheemLetter.class, DefaultPermanentTafkheemLetter.class);
    }

    /**
     * Creates an instance of type PermanentTafkheemLetter.  Modifies the underlying ontology.
     */
    public PermanentTafkheemLetter createPermanentTafkheemLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERMANENTTAFKHEEMLETTER, DefaultPermanentTafkheemLetter.class);
    }

    /**
     * Gets an instance of type PermanentTafkheemLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PermanentTafkheemLetter getPermanentTafkheemLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERMANENTTAFKHEEMLETTER, DefaultPermanentTafkheemLetter.class);
    }

    /**
     * Gets all instances of PermanentTafkheemLetter from the ontology.
     */
    public Collection<? extends PermanentTafkheemLetter> getAllPermanentTafkheemLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERMANENTTAFKHEEMLETTER, DefaultPermanentTafkheemLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/PermanentTarqeeqLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/PermanentTarqeeqLetter", PermanentTarqeeqLetter.class, DefaultPermanentTarqeeqLetter.class);
    }

    /**
     * Creates an instance of type PermanentTarqeeqLetter.  Modifies the underlying ontology.
     */
    public PermanentTarqeeqLetter createPermanentTarqeeqLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PERMANENTTARQEEQLETTER, DefaultPermanentTarqeeqLetter.class);
    }

    /**
     * Gets an instance of type PermanentTarqeeqLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PermanentTarqeeqLetter getPermanentTarqeeqLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PERMANENTTARQEEQLETTER, DefaultPermanentTarqeeqLetter.class);
    }

    /**
     * Gets all instances of PermanentTarqeeqLetter from the ontology.
     */
    public Collection<? extends PermanentTarqeeqLetter> getAllPermanentTarqeeqLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PERMANENTTARQEEQLETTER, DefaultPermanentTarqeeqLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/QalqalahLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/QalqalahLetter", QalqalahLetter.class, DefaultQalqalahLetter.class);
    }

    /**
     * Creates an instance of type QalqalahLetter.  Modifies the underlying ontology.
     */
    public QalqalahLetter createQalqalahLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QALQALAHLETTER, DefaultQalqalahLetter.class);
    }

    /**
     * Gets an instance of type QalqalahLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public QalqalahLetter getQalqalahLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QALQALAHLETTER, DefaultQalqalahLetter.class);
    }

    /**
     * Gets all instances of QalqalahLetter from the ontology.
     */
    public Collection<? extends QalqalahLetter> getAllQalqalahLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QALQALAHLETTER, DefaultQalqalahLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/QalqalahRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/QalqalahRule", QalqalahRule.class, DefaultQalqalahRule.class);
    }

    /**
     * Creates an instance of type QalqalahRule.  Modifies the underlying ontology.
     */
    public QalqalahRule createQalqalahRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QALQALAHRULE, DefaultQalqalahRule.class);
    }

    /**
     * Gets an instance of type QalqalahRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public QalqalahRule getQalqalahRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QALQALAHRULE, DefaultQalqalahRule.class);
    }

    /**
     * Gets all instances of QalqalahRule from the ontology.
     */
    public Collection<? extends QalqalahRule> getAllQalqalahRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QALQALAHRULE, DefaultQalqalahRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/QamariLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/QamariLetter", QamariLetter.class, DefaultQamariLetter.class);
    }

    /**
     * Creates an instance of type QamariLetter.  Modifies the underlying ontology.
     */
    public QamariLetter createQamariLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_QAMARILETTER, DefaultQamariLetter.class);
    }

    /**
     * Gets an instance of type QamariLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public QamariLetter getQamariLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_QAMARILETTER, DefaultQamariLetter.class);
    }

    /**
     * Gets all instances of QamariLetter from the ontology.
     */
    public Collection<? extends QamariLetter> getAllQamariLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_QAMARILETTER, DefaultQamariLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Rule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Rule", Rule.class, DefaultRule.class);
    }

    /**
     * Creates an instance of type Rule.  Modifies the underlying ontology.
     */
    public Rule createRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RULE, DefaultRule.class);
    }

    /**
     * Gets an instance of type Rule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rule getRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RULE, DefaultRule.class);
    }

    /**
     * Gets all instances of Rule from the ontology.
     */
    public Collection<? extends Rule> getAllRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RULE, DefaultRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/RuleOccurrence
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/RuleOccurrence", RuleOccurrence.class, DefaultRuleOccurrence.class);
    }

    /**
     * Creates an instance of type RuleOccurrence.  Modifies the underlying ontology.
     */
    public RuleOccurrence createRuleOccurrence(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RULEOCCURRENCE, DefaultRuleOccurrence.class);
    }

    /**
     * Gets an instance of type RuleOccurrence with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RuleOccurrence getRuleOccurrence(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RULEOCCURRENCE, DefaultRuleOccurrence.class);
    }

    /**
     * Gets all instances of RuleOccurrence from the ontology.
     */
    public Collection<? extends RuleOccurrence> getAllRuleOccurrenceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RULEOCCURRENCE, DefaultRuleOccurrence.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/RuleState
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/RuleState", RuleState.class, DefaultRuleState.class);
    }

    /**
     * Creates an instance of type RuleState.  Modifies the underlying ontology.
     */
    public RuleState createRuleState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RULESTATE, DefaultRuleState.class);
    }

    /**
     * Gets an instance of type RuleState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public RuleState getRuleState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RULESTATE, DefaultRuleState.class);
    }

    /**
     * Gets all instances of RuleState from the ontology.
     */
    public Collection<? extends RuleState> getAllRuleStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RULESTATE, DefaultRuleState.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/SecondaryMedd
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/SecondaryMedd", SecondaryMedd.class, DefaultSecondaryMedd.class);
    }

    /**
     * Creates an instance of type SecondaryMedd.  Modifies the underlying ontology.
     */
    public SecondaryMedd createSecondaryMedd(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SECONDARYMEDD, DefaultSecondaryMedd.class);
    }

    /**
     * Gets an instance of type SecondaryMedd with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SecondaryMedd getSecondaryMedd(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SECONDARYMEDD, DefaultSecondaryMedd.class);
    }

    /**
     * Gets all instances of SecondaryMedd from the ontology.
     */
    public Collection<? extends SecondaryMedd> getAllSecondaryMeddInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SECONDARYMEDD, DefaultSecondaryMedd.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/ShamsiLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/ShamsiLetter", ShamsiLetter.class, DefaultShamsiLetter.class);
    }

    /**
     * Creates an instance of type ShamsiLetter.  Modifies the underlying ontology.
     */
    public ShamsiLetter createShamsiLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SHAMSILETTER, DefaultShamsiLetter.class);
    }

    /**
     * Gets an instance of type ShamsiLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ShamsiLetter getShamsiLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SHAMSILETTER, DefaultShamsiLetter.class);
    }

    /**
     * Gets all instances of ShamsiLetter from the ontology.
     */
    public Collection<? extends ShamsiLetter> getAllShamsiLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SHAMSILETTER, DefaultShamsiLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/SilentLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/SilentLetter", SilentLetter.class, DefaultSilentLetter.class);
    }

    /**
     * Creates an instance of type SilentLetter.  Modifies the underlying ontology.
     */
    public SilentLetter createSilentLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SILENTLETTER, DefaultSilentLetter.class);
    }

    /**
     * Gets an instance of type SilentLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SilentLetter getSilentLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SILENTLETTER, DefaultSilentLetter.class);
    }

    /**
     * Gets all instances of SilentLetter from the ontology.
     */
    public Collection<? extends SilentLetter> getAllSilentLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SILENTLETTER, DefaultSilentLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/SpecificArticulationPoint
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/SpecificArticulationPoint", SpecificArticulationPoint.class, DefaultSpecificArticulationPoint.class);
    }

    /**
     * Creates an instance of type SpecificArticulationPoint.  Modifies the underlying ontology.
     */
    public SpecificArticulationPoint createSpecificArticulationPoint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SPECIFICARTICULATIONPOINT, DefaultSpecificArticulationPoint.class);
    }

    /**
     * Gets an instance of type SpecificArticulationPoint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SpecificArticulationPoint getSpecificArticulationPoint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SPECIFICARTICULATIONPOINT, DefaultSpecificArticulationPoint.class);
    }

    /**
     * Gets all instances of SpecificArticulationPoint from the ontology.
     */
    public Collection<? extends SpecificArticulationPoint> getAllSpecificArticulationPointInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SPECIFICARTICULATIONPOINT, DefaultSpecificArticulationPoint.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/StoppingRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/StoppingRule", StoppingRule.class, DefaultStoppingRule.class);
    }

    /**
     * Creates an instance of type StoppingRule.  Modifies the underlying ontology.
     */
    public StoppingRule createStoppingRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STOPPINGRULE, DefaultStoppingRule.class);
    }

    /**
     * Gets an instance of type StoppingRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StoppingRule getStoppingRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STOPPINGRULE, DefaultStoppingRule.class);
    }

    /**
     * Gets all instances of StoppingRule from the ontology.
     */
    public Collection<? extends StoppingRule> getAllStoppingRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STOPPINGRULE, DefaultStoppingRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/StrongCharacteristic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/StrongCharacteristic", StrongCharacteristic.class, DefaultStrongCharacteristic.class);
    }

    /**
     * Creates an instance of type StrongCharacteristic.  Modifies the underlying ontology.
     */
    public StrongCharacteristic createStrongCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STRONGCHARACTERISTIC, DefaultStrongCharacteristic.class);
    }

    /**
     * Gets an instance of type StrongCharacteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public StrongCharacteristic getStrongCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STRONGCHARACTERISTIC, DefaultStrongCharacteristic.class);
    }

    /**
     * Gets all instances of StrongCharacteristic from the ontology.
     */
    public Collection<? extends StrongCharacteristic> getAllStrongCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STRONGCHARACTERISTIC, DefaultStrongCharacteristic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/SukoonOnStopDiacritic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/SukoonOnStopDiacritic", SukoonOnStopDiacritic.class, DefaultSukoonOnStopDiacritic.class);
    }

    /**
     * Creates an instance of type SukoonOnStopDiacritic.  Modifies the underlying ontology.
     */
    public SukoonOnStopDiacritic createSukoonOnStopDiacritic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUKOONONSTOPDIACRITIC, DefaultSukoonOnStopDiacritic.class);
    }

    /**
     * Gets an instance of type SukoonOnStopDiacritic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public SukoonOnStopDiacritic getSukoonOnStopDiacritic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUKOONONSTOPDIACRITIC, DefaultSukoonOnStopDiacritic.class);
    }

    /**
     * Gets all instances of SukoonOnStopDiacritic from the ontology.
     */
    public Collection<? extends SukoonOnStopDiacritic> getAllSukoonOnStopDiacriticInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUKOONONSTOPDIACRITIC, DefaultSukoonOnStopDiacritic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TafkheemLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TafkheemLetter", TafkheemLetter.class, DefaultTafkheemLetter.class);
    }

    /**
     * Creates an instance of type TafkheemLetter.  Modifies the underlying ontology.
     */
    public TafkheemLetter createTafkheemLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TAFKHEEMLETTER, DefaultTafkheemLetter.class);
    }

    /**
     * Gets an instance of type TafkheemLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TafkheemLetter getTafkheemLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TAFKHEEMLETTER, DefaultTafkheemLetter.class);
    }

    /**
     * Gets all instances of TafkheemLetter from the ontology.
     */
    public Collection<? extends TafkheemLetter> getAllTafkheemLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TAFKHEEMLETTER, DefaultTafkheemLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TafkheemRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TafkheemRule", TafkheemRule.class, DefaultTafkheemRule.class);
    }

    /**
     * Creates an instance of type TafkheemRule.  Modifies the underlying ontology.
     */
    public TafkheemRule createTafkheemRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TAFKHEEMRULE, DefaultTafkheemRule.class);
    }

    /**
     * Gets an instance of type TafkheemRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TafkheemRule getTafkheemRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TAFKHEEMRULE, DefaultTafkheemRule.class);
    }

    /**
     * Gets all instances of TafkheemRule from the ontology.
     */
    public Collection<? extends TafkheemRule> getAllTafkheemRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TAFKHEEMRULE, DefaultTafkheemRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TakhfeemPermanentRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TakhfeemPermanentRule", TakhfeemPermanentRule.class, DefaultTakhfeemPermanentRule.class);
    }

    /**
     * Creates an instance of type TakhfeemPermanentRule.  Modifies the underlying ontology.
     */
    public TakhfeemPermanentRule createTakhfeemPermanentRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TAKHFEEMPERMANENTRULE, DefaultTakhfeemPermanentRule.class);
    }

    /**
     * Gets an instance of type TakhfeemPermanentRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TakhfeemPermanentRule getTakhfeemPermanentRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TAKHFEEMPERMANENTRULE, DefaultTakhfeemPermanentRule.class);
    }

    /**
     * Gets all instances of TakhfeemPermanentRule from the ontology.
     */
    public Collection<? extends TakhfeemPermanentRule> getAllTakhfeemPermanentRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TAKHFEEMPERMANENTRULE, DefaultTakhfeemPermanentRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TakhfeemTemporaryRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TakhfeemTemporaryRule", TakhfeemTemporaryRule.class, DefaultTakhfeemTemporaryRule.class);
    }

    /**
     * Creates an instance of type TakhfeemTemporaryRule.  Modifies the underlying ontology.
     */
    public TakhfeemTemporaryRule createTakhfeemTemporaryRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TAKHFEEMTEMPORARYRULE, DefaultTakhfeemTemporaryRule.class);
    }

    /**
     * Gets an instance of type TakhfeemTemporaryRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TakhfeemTemporaryRule getTakhfeemTemporaryRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TAKHFEEMTEMPORARYRULE, DefaultTakhfeemTemporaryRule.class);
    }

    /**
     * Gets all instances of TakhfeemTemporaryRule from the ontology.
     */
    public Collection<? extends TakhfeemTemporaryRule> getAllTakhfeemTemporaryRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TAKHFEEMTEMPORARYRULE, DefaultTakhfeemTemporaryRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Tanween
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Tanween", Tanween.class, DefaultTanween.class);
    }

    /**
     * Creates an instance of type Tanween.  Modifies the underlying ontology.
     */
    public Tanween createTanween(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TANWEEN, DefaultTanween.class);
    }

    /**
     * Gets an instance of type Tanween with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tanween getTanween(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TANWEEN, DefaultTanween.class);
    }

    /**
     * Gets all instances of Tanween from the ontology.
     */
    public Collection<? extends Tanween> getAllTanweenInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TANWEEN, DefaultTanween.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TarqeeqLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TarqeeqLetter", TarqeeqLetter.class, DefaultTarqeeqLetter.class);
    }

    /**
     * Creates an instance of type TarqeeqLetter.  Modifies the underlying ontology.
     */
    public TarqeeqLetter createTarqeeqLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TARQEEQLETTER, DefaultTarqeeqLetter.class);
    }

    /**
     * Gets an instance of type TarqeeqLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TarqeeqLetter getTarqeeqLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TARQEEQLETTER, DefaultTarqeeqLetter.class);
    }

    /**
     * Gets all instances of TarqeeqLetter from the ontology.
     */
    public Collection<? extends TarqeeqLetter> getAllTarqeeqLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TARQEEQLETTER, DefaultTarqeeqLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TarqeeqRule
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TarqeeqRule", TarqeeqRule.class, DefaultTarqeeqRule.class);
    }

    /**
     * Creates an instance of type TarqeeqRule.  Modifies the underlying ontology.
     */
    public TarqeeqRule createTarqeeqRule(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TARQEEQRULE, DefaultTarqeeqRule.class);
    }

    /**
     * Gets an instance of type TarqeeqRule with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TarqeeqRule getTarqeeqRule(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TARQEEQRULE, DefaultTarqeeqRule.class);
    }

    /**
     * Gets all instances of TarqeeqRule from the ontology.
     */
    public Collection<? extends TarqeeqRule> getAllTarqeeqRuleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TARQEEQRULE, DefaultTarqeeqRule.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TemporaryTafkheemLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TemporaryTafkheemLetter", TemporaryTafkheemLetter.class, DefaultTemporaryTafkheemLetter.class);
    }

    /**
     * Creates an instance of type TemporaryTafkheemLetter.  Modifies the underlying ontology.
     */
    public TemporaryTafkheemLetter createTemporaryTafkheemLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORARYTAFKHEEMLETTER, DefaultTemporaryTafkheemLetter.class);
    }

    /**
     * Gets an instance of type TemporaryTafkheemLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemporaryTafkheemLetter getTemporaryTafkheemLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORARYTAFKHEEMLETTER, DefaultTemporaryTafkheemLetter.class);
    }

    /**
     * Gets all instances of TemporaryTafkheemLetter from the ontology.
     */
    public Collection<? extends TemporaryTafkheemLetter> getAllTemporaryTafkheemLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORARYTAFKHEEMLETTER, DefaultTemporaryTafkheemLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TemporaryTarqeeqLetter
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TemporaryTarqeeqLetter", TemporaryTarqeeqLetter.class, DefaultTemporaryTarqeeqLetter.class);
    }

    /**
     * Creates an instance of type TemporaryTarqeeqLetter.  Modifies the underlying ontology.
     */
    public TemporaryTarqeeqLetter createTemporaryTarqeeqLetter(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPORARYTARQEEQLETTER, DefaultTemporaryTarqeeqLetter.class);
    }

    /**
     * Gets an instance of type TemporaryTarqeeqLetter with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TemporaryTarqeeqLetter getTemporaryTarqeeqLetter(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPORARYTARQEEQLETTER, DefaultTemporaryTarqeeqLetter.class);
    }

    /**
     * Gets all instances of TemporaryTarqeeqLetter from the ontology.
     */
    public Collection<? extends TemporaryTarqeeqLetter> getAllTemporaryTarqeeqLetterInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPORARYTARQEEQLETTER, DefaultTemporaryTarqeeqLetter.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/TypesOfCharacteristic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/TypesOfCharacteristic", TypesOfCharacteristic.class, DefaultTypesOfCharacteristic.class);
    }

    /**
     * Creates an instance of type TypesOfCharacteristic.  Modifies the underlying ontology.
     */
    public TypesOfCharacteristic createTypesOfCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TYPESOFCHARACTERISTIC, DefaultTypesOfCharacteristic.class);
    }

    /**
     * Gets an instance of type TypesOfCharacteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TypesOfCharacteristic getTypesOfCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TYPESOFCHARACTERISTIC, DefaultTypesOfCharacteristic.class);
    }

    /**
     * Gets all instances of TypesOfCharacteristic from the ontology.
     */
    public Collection<? extends TypesOfCharacteristic> getAllTypesOfCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TYPESOFCHARACTERISTIC, DefaultTypesOfCharacteristic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Verse
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Verse", Verse.class, DefaultVerse.class);
    }

    /**
     * Creates an instance of type Verse.  Modifies the underlying ontology.
     */
    public Verse createVerse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets an instance of type Verse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Verse getVerse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }

    /**
     * Gets all instances of Verse from the ontology.
     */
    public Collection<? extends Verse> getAllVerseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_VERSE, DefaultVerse.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/WeakCharacteristic
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/WeakCharacteristic", WeakCharacteristic.class, DefaultWeakCharacteristic.class);
    }

    /**
     * Creates an instance of type WeakCharacteristic.  Modifies the underlying ontology.
     */
    public WeakCharacteristic createWeakCharacteristic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WEAKCHARACTERISTIC, DefaultWeakCharacteristic.class);
    }

    /**
     * Gets an instance of type WeakCharacteristic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WeakCharacteristic getWeakCharacteristic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WEAKCHARACTERISTIC, DefaultWeakCharacteristic.class);
    }

    /**
     * Gets all instances of WeakCharacteristic from the ontology.
     */
    public Collection<? extends WeakCharacteristic> getAllWeakCharacteristicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WEAKCHARACTERISTIC, DefaultWeakCharacteristic.class);
    }


    /* ***************************************************
     * Class http://www.semantictajweed.com/ontology/Word
     */

    {
        javaMapping.add("http://www.semantictajweed.com/ontology/Word", Word.class, DefaultWord.class);
    }

    /**
     * Creates an instance of type Word.  Modifies the underlying ontology.
     */
    public Word createWord(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WORD, DefaultWord.class);
    }

    /**
     * Gets an instance of type Word with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Word getWord(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WORD, DefaultWord.class);
    }

    /**
     * Gets all instances of Word from the ontology.
     */
    public Collection<? extends Word> getAllWordInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WORD, DefaultWord.class);
    }


}
